{
  "hash": "ab050abd921d77b8f6ecebdb0afb0c8b",
  "result": {
    "markdown": "---\ntitle: \"midterm part 2\"\nauthor: \"rachel babadzhanov\"\n---\n\n\n# easier problems:\n\nproblem 1: Do simple math with numbers, addition, subtraction, multiplication, division\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 + 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7\n```\n:::\n\n```{.r .cell-code}\n7 - 4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n2 * 5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\n10 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n\nproblem 2: Put numbers into variables, do simple math on the variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\nb <- 456\nc <- 23423\n\na+b+c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23880\n```\n:::\n\n```{.r .cell-code}\na+b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 457\n```\n:::\n\n```{.r .cell-code}\na*c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23423\n```\n:::\n:::\n\n\nproblem 3: Write code that will place the numbers 1 to 100 separately into a variable using for loop. Then, again using the seq function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:100\n\na <- seq(from = 1, to = 100, by = 1)\n\na <- seq(1,100,1)\n\na <- seq(to=100, from=1, by=1)\n\n# start with null\n# grow the vector\nb <- c()\n\nfor (i in 1:100) {\n  b <- c(b,i)\n}\n\n# start with empty vector of 100 0s\n\nd <- rep (0,100)\n\nd[1] <- 1\nd[2] <- 2\nd[3] <- 3\n\nfor (i in 1:100){\n  d[i] <- i\n}\n\ne <- rep(0,100)\n\nfor (i in 1:1000){\n  if (i <= 100) e[i] <- i\n}\n```\n:::\n\n\n4. Find the sum of all the integer numbers from 1 to 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n\n```{.r .cell-code}\nsum(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n\n```{.r .cell-code}\na <- 1:100\n\nmy_sum <- 0\n\nfor (i in a) {\n  my_sum <- my_sum +i\n  print(my_sum)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 6\n[1] 10\n[1] 15\n[1] 21\n[1] 28\n[1] 36\n[1] 45\n[1] 55\n[1] 66\n[1] 78\n[1] 91\n[1] 105\n[1] 120\n[1] 136\n[1] 153\n[1] 171\n[1] 190\n[1] 210\n[1] 231\n[1] 253\n[1] 276\n[1] 300\n[1] 325\n[1] 351\n[1] 378\n[1] 406\n[1] 435\n[1] 465\n[1] 496\n[1] 528\n[1] 561\n[1] 595\n[1] 630\n[1] 666\n[1] 703\n[1] 741\n[1] 780\n[1] 820\n[1] 861\n[1] 903\n[1] 946\n[1] 990\n[1] 1035\n[1] 1081\n[1] 1128\n[1] 1176\n[1] 1225\n[1] 1275\n[1] 1326\n[1] 1378\n[1] 1431\n[1] 1485\n[1] 1540\n[1] 1596\n[1] 1653\n[1] 1711\n[1] 1770\n[1] 1830\n[1] 1891\n[1] 1953\n[1] 2016\n[1] 2080\n[1] 2145\n[1] 2211\n[1] 2278\n[1] 2346\n[1] 2415\n[1] 2485\n[1] 2556\n[1] 2628\n[1] 2701\n[1] 2775\n[1] 2850\n[1] 2926\n[1] 3003\n[1] 3081\n[1] 3160\n[1] 3240\n[1] 3321\n[1] 3403\n[1] 3486\n[1] 3570\n[1] 3655\n[1] 3741\n[1] 3828\n[1] 3916\n[1] 4005\n[1] 4095\n[1] 4186\n[1] 4278\n[1] 4371\n[1] 4465\n[1] 4560\n[1] 4656\n[1] 4753\n[1] 4851\n[1] 4950\n[1] 5050\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sum <- function(my_numbers){\n  the_sum <- 0\n  for(i in my_numbers){\n    the_sum <- the_sum+i\n  }\n  return(the_sum)\n}\n\nmy_sum(1:100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n\n```{.r .cell-code}\nmy_sum(1:10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n\n```{.r .cell-code}\nmy_sum(1:1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 500500\n```\n:::\n:::\n\n\n5. Write a function to find the sum of all integers between any two values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sum_range <- function(min, max){\n  \n  my_numbers <- min:max\n  the_sum    <- 0\n  for(i in my_numbers){\n    the_sum <- the_sum+i\n  }\n  return(the_sum)\n}\n\nmy_sum_range(min = 1, max= 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nmy_sum_range(min =1, max= 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n\n```{.r .cell-code}\n#\n\nmy_sum_rangeB <- function(min, max){\n  \n  my_numbers <- seq(from= min,to = max, by = 1)\n  the_sum    <- 0\n  for(i in my_numbers){\n    the_sum <- the_sum+i\n  }\n  return(the_sum)\n}\n\nmy_sum_rangeB(min = 1, max= 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nmy_sum_rangeB(min =1, max= 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5050\n```\n:::\n\n```{.r .cell-code}\n####\n\nmy_sum_rangeC <- function(min, max){\n  \n  my_numbers <- seq(from= min,to = max, by = 1)\n  the_sum    <- 0\n  for(i in my_numbers){\n    the_sum <- the_sum+i\n  }\n  return(list(sum = the_sum,\n              vector = my_numbers))\n}\n\nmy_sum_rangeC(min = 1, max= 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$sum\n[1] 6\n\n$vector\n[1] 1 2 3\n```\n:::\n\n```{.r .cell-code}\nmy_sum_rangeC(min =1, max= 100)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$sum\n[1] 5050\n\n$vector\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n:::\n\n\n6. List all of the odd numbers from 1 to 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:100\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n```\n:::\n\n```{.r .cell-code}\nseq(1,100,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n```\n:::\n\n```{.r .cell-code}\na <- 1:100\n\nfor (i in a){\n  if(i%%2 == 1){\n    print(i)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n```\n:::\n\n```{.r .cell-code}\n##\n\na <- 1:100\n\nfor (i in a){\n  if(i%%2 == 1) print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n```\n:::\n\n```{.r .cell-code}\n## logical indexing\n\na <- 1:100\n\na[a%%2 == 1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49\n[26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99\n```\n:::\n:::\n\n\n7. List all of the odd numbers from 1 to 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:100\n\nis_odd <- function(x){\n  if(x%%2 == 1) {\n    TRUE\n  }else{\n    FALSE\n  }\n}\n\nfor(i in a){\n  if( is_odd(i) == TRUE ) print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 3\n[1] 5\n[1] 7\n[1] 9\n[1] 11\n[1] 13\n[1] 15\n[1] 17\n[1] 19\n[1] 21\n[1] 23\n[1] 25\n[1] 27\n[1] 29\n[1] 31\n[1] 33\n[1] 35\n[1] 37\n[1] 39\n[1] 41\n[1] 43\n[1] 45\n[1] 47\n[1] 49\n[1] 51\n[1] 53\n[1] 55\n[1] 57\n[1] 59\n[1] 61\n[1] 63\n[1] 65\n[1] 67\n[1] 69\n[1] 71\n[1] 73\n[1] 75\n[1] 77\n[1] 79\n[1] 81\n[1] 83\n[1] 85\n[1] 87\n[1] 89\n[1] 91\n[1] 93\n[1] 95\n[1] 97\n[1] 99\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:1000\n\nisprime <- function(x){\n  generate_sequence <- 1:x\n  counter <- 0\n  for(i in generate_sequence){\n    if(x%%i == 0){\n      counter <- counter+1\n    }\n  }\n  \n  if(counter <= 2) {\n    return(TRUE)\n  } else{\n    return(FALSE)\n  }\n}\n\nfor(i in a){\n  if(isprime(i) == TRUE) print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 5\n[1] 7\n[1] 11\n[1] 13\n[1] 17\n[1] 19\n[1] 23\n[1] 29\n[1] 31\n[1] 37\n[1] 41\n[1] 43\n[1] 47\n[1] 53\n[1] 59\n[1] 61\n[1] 67\n[1] 71\n[1] 73\n[1] 79\n[1] 83\n[1] 89\n[1] 97\n[1] 101\n[1] 103\n[1] 107\n[1] 109\n[1] 113\n[1] 127\n[1] 131\n[1] 137\n[1] 139\n[1] 149\n[1] 151\n[1] 157\n[1] 163\n[1] 167\n[1] 173\n[1] 179\n[1] 181\n[1] 191\n[1] 193\n[1] 197\n[1] 199\n[1] 211\n[1] 223\n[1] 227\n[1] 229\n[1] 233\n[1] 239\n[1] 241\n[1] 251\n[1] 257\n[1] 263\n[1] 269\n[1] 271\n[1] 277\n[1] 281\n[1] 283\n[1] 293\n[1] 307\n[1] 311\n[1] 313\n[1] 317\n[1] 331\n[1] 337\n[1] 347\n[1] 349\n[1] 353\n[1] 359\n[1] 367\n[1] 373\n[1] 379\n[1] 383\n[1] 389\n[1] 397\n[1] 401\n[1] 409\n[1] 419\n[1] 421\n[1] 431\n[1] 433\n[1] 439\n[1] 443\n[1] 449\n[1] 457\n[1] 461\n[1] 463\n[1] 467\n[1] 479\n[1] 487\n[1] 491\n[1] 499\n[1] 503\n[1] 509\n[1] 521\n[1] 523\n[1] 541\n[1] 547\n[1] 557\n[1] 563\n[1] 569\n[1] 571\n[1] 577\n[1] 587\n[1] 593\n[1] 599\n[1] 601\n[1] 607\n[1] 613\n[1] 617\n[1] 619\n[1] 631\n[1] 641\n[1] 643\n[1] 647\n[1] 653\n[1] 659\n[1] 661\n[1] 673\n[1] 677\n[1] 683\n[1] 691\n[1] 701\n[1] 709\n[1] 719\n[1] 727\n[1] 733\n[1] 739\n[1] 743\n[1] 751\n[1] 757\n[1] 761\n[1] 769\n[1] 773\n[1] 787\n[1] 797\n[1] 809\n[1] 811\n[1] 821\n[1] 823\n[1] 827\n[1] 829\n[1] 839\n[1] 853\n[1] 857\n[1] 859\n[1] 863\n[1] 877\n[1] 881\n[1] 883\n[1] 887\n[1] 907\n[1] 911\n[1] 919\n[1] 929\n[1] 937\n[1] 941\n[1] 947\n[1] 953\n[1] 967\n[1] 971\n[1] 977\n[1] 983\n[1] 991\n[1] 997\n```\n:::\n\n```{.r .cell-code}\n#######\n\nis_prime_B <- function(x){\n  generate_sequence <- 1:x\n  counter <- 0\n  for(i in generate_sequence){\n    if(x%%i == 0){\n      counter <- counter+1\n    }\n  }\n  \n  if(counter <= 2) {\n    prime <- TRUE\n  } else{\n    prime <- FALSE\n  }\n  \n  return(c(x,counter,prime))\n}\n\nprime_table <- data.frame()\n\nfor(i in a){\n  prime_table <- rbind( prime_table, is_prime_B(i))\n}\n\nnames(prime_table) <- c(\"number\",\"count\",\"prime\")\n\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nprime_table %>%\n  filter(prime == 1) %>%\n  select(number)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    number\n1        1\n2        2\n3        3\n4        5\n5        7\n6       11\n7       13\n8       17\n9       19\n10      23\n11      29\n12      31\n13      37\n14      41\n15      43\n16      47\n17      53\n18      59\n19      61\n20      67\n21      71\n22      73\n23      79\n24      83\n25      89\n26      97\n27     101\n28     103\n29     107\n30     109\n31     113\n32     127\n33     131\n34     137\n35     139\n36     149\n37     151\n38     157\n39     163\n40     167\n41     173\n42     179\n43     181\n44     191\n45     193\n46     197\n47     199\n48     211\n49     223\n50     227\n51     229\n52     233\n53     239\n54     241\n55     251\n56     257\n57     263\n58     269\n59     271\n60     277\n61     281\n62     283\n63     293\n64     307\n65     311\n66     313\n67     317\n68     331\n69     337\n70     347\n71     349\n72     353\n73     359\n74     367\n75     373\n76     379\n77     383\n78     389\n79     397\n80     401\n81     409\n82     419\n83     421\n84     431\n85     433\n86     439\n87     443\n88     449\n89     457\n90     461\n91     463\n92     467\n93     479\n94     487\n95     491\n96     499\n97     503\n98     509\n99     521\n100    523\n101    541\n102    547\n103    557\n104    563\n105    569\n106    571\n107    577\n108    587\n109    593\n110    599\n111    601\n112    607\n113    613\n114    617\n115    619\n116    631\n117    641\n118    643\n119    647\n120    653\n121    659\n122    661\n123    673\n124    677\n125    683\n126    691\n127    701\n128    709\n129    719\n130    727\n131    733\n132    739\n133    743\n134    751\n135    757\n136    761\n137    769\n138    773\n139    787\n140    797\n141    809\n142    811\n143    821\n144    823\n145    827\n146    829\n147    839\n148    853\n149    857\n150    859\n151    863\n152    877\n153    881\n154    883\n155    887\n156    907\n157    911\n158    919\n159    929\n160    937\n161    941\n162    947\n163    953\n164    967\n165    971\n166    977\n167    983\n168    991\n169    997\n```\n:::\n:::\n\n\n#harder problems \n\n1. List the numbers from 1 to 100 with the following constraints. If the number can be divided by three evenly, then print Fizz instead of the number. If the number can be divided by five evenly, then print Buzz instead of the number. Finally, if the number can be divided by three and five evenly, then print FizzBuzz instead of the number. The answer could look something like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:100) {\n  if (i %% 3 == 0 & i %% 5 == 0) {\n    print(\"FizzBuzz\")\n  } else if (i %% 3 == 0) {\n    print(\"Fizz\")\n  } else if (i %% 5 == 0) {\n    print(\"Buzz\")\n  } else {\n    print(i)\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] \"Fizz\"\n[1] 4\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 7\n[1] 8\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 11\n[1] \"Fizz\"\n[1] 13\n[1] 14\n[1] \"FizzBuzz\"\n[1] 16\n[1] 17\n[1] \"Fizz\"\n[1] 19\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 22\n[1] 23\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 26\n[1] \"Fizz\"\n[1] 28\n[1] 29\n[1] \"FizzBuzz\"\n[1] 31\n[1] 32\n[1] \"Fizz\"\n[1] 34\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 37\n[1] 38\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 41\n[1] \"Fizz\"\n[1] 43\n[1] 44\n[1] \"FizzBuzz\"\n[1] 46\n[1] 47\n[1] \"Fizz\"\n[1] 49\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 52\n[1] 53\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 56\n[1] \"Fizz\"\n[1] 58\n[1] 59\n[1] \"FizzBuzz\"\n[1] 61\n[1] 62\n[1] \"Fizz\"\n[1] 64\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 67\n[1] 68\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 71\n[1] \"Fizz\"\n[1] 73\n[1] 74\n[1] \"FizzBuzz\"\n[1] 76\n[1] 77\n[1] \"Fizz\"\n[1] 79\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 82\n[1] 83\n[1] \"Fizz\"\n[1] \"Buzz\"\n[1] 86\n[1] \"Fizz\"\n[1] 88\n[1] 89\n[1] \"FizzBuzz\"\n[1] 91\n[1] 92\n[1] \"Fizz\"\n[1] 94\n[1] \"Buzz\"\n[1] \"Fizz\"\n[1] 97\n[1] 98\n[1] \"Fizz\"\n[1] \"Buzz\"\n```\n:::\n:::\n\n2. Generate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbers <- 1:10\n\nmultiplication_table <- matrix(0, nrow = 10, ncol = 10)\n\ncolnames(multiplication_table) <- numbers\nrownames(multiplication_table) <- numbers\n\n# Loop through each row and column index and assign the product to the corresponding cell in the matrix\nfor (i in numbers) {\n  for (j in numbers) {\n    multiplication_table[i, j] <- i * j\n  }\n}\n\n# Print the multiplication table\nmultiplication_table\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    1  2  3  4  5  6  7  8  9  10\n1   1  2  3  4  5  6  7  8  9  10\n2   2  4  6  8 10 12 14 16 18  20\n3   3  6  9 12 15 18 21 24 27  30\n4   4  8 12 16 20 24 28 32 36  40\n5   5 10 15 20 25 30 35 40 45  50\n6   6 12 18 24 30 36 42 48 54  60\n7   7 14 21 28 35 42 49 56 63  70\n8   8 16 24 32 40 48 56 64 72  80\n9   9 18 27 36 45 54 63 72 81  90\n10 10 20 30 40 50 60 70 80 90 100\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}