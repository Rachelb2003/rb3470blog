{
  "hash": "dbe0e2d1b390796f7d92e91ae0b56a56",
  "result": {
    "markdown": "---\ntitle: \"week 4\"\nauthor: rachel babadzhanov\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#loads ggplot2, and some example data sets\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nstarwars_copy <- starwars\n\n# check out some of the datatypes\nhead(starwars_copy)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$height)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$mass)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nclass(starwars_copy$homeworld)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n\n```{.r .cell-code}\n# plot some variables\nggplot(data = starwars_copy,\n       mapping = aes(x=height,y=mass) )+\n  geom_point()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 28 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n## Data Types\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign 1 to object named a\na <- 1\n1 -> b\nf <- 4 -> g\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# look at the data type of object in a\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n:::\n\n\n#### integers\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#integers (no decimals)\n# L specifies integer\ntypeof(1L) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nclass(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"integer\"\n```\n:::\n\n```{.r .cell-code}\nis.integer(1L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.integer(1.1) # coerces to integer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.integer(1.5) # rounds down\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nas.integer(1.9) # rounds down\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ninteger(length = 5) #initialize a vector for integers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n\n```{.r .cell-code}\nis.integer(as.integer(1:5))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n#### numeric/doubles\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# decimal numbers\n# numbers without decimals default to numeric\ntypeof(1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"double\"\n```\n:::\n\n```{.r .cell-code}\nclass(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nis.numeric(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.numeric(1L) # coerces integer to numeric\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nnumeric(length = 5) #initialize a vector for doubles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 0 0 0 0\n```\n:::\n:::\n\n\n#### Logical/Boolean\n\nUppercase TRUE, or FALSE makes logical (binary) variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nclass(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n```\n:::\n\n```{.r .cell-code}\nis.logical(FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(1) # coerces 1 to TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nas.logical(0) # coerces 0  to FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nlogical(length = 5) # initialize a logical vector\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE FALSE\n```\n:::\n:::\n\n\n### data.frame\n\nA table with rows and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- data.frame(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a     b     random\n1 1   one 0.20792526\n2 2   two 0.44115041\n3 3 three 0.03034016\n4 4  four 0.28440697\n5 5  five 0.93514933\n```\n:::\n\n```{.r .cell-code}\n# access columns with $\nmy_df$a == 1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\nmy_df$b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n```\n:::\n\n```{.r .cell-code}\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b    random\n1 1 one 0.2079253\n```\n:::\n\n```{.r .cell-code}\nmy_df[,1] # column 1, all rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2,] # rows 1 to 2, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  a   b    random\n1 1 one 0.2079253\n2 2 two 0.4411504\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2079253 0.4411504\n```\n:::\n:::\n\n\n### Tibble\n\nA table with rows and columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_df <- tibble(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n2     2 two    0.241\n3     3 three  0.194\n4     4 four   0.297\n5     5 five   0.551\n```\n:::\n\n```{.r .cell-code}\n# access columns with $\nmy_df$a\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n\n```{.r .cell-code}\nmy_df$b\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n```\n:::\n\n```{.r .cell-code}\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n```\n:::\n\n```{.r .cell-code}\nmy_df[,1] # column 1, all rows\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 1\n      a\n  <int>\n1     1\n2     2\n3     3\n4     4\n5     5\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2,] # rows 1 to 2, all columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n2     2 two    0.241\n```\n:::\n\n```{.r .cell-code}\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  random\n   <dbl>\n1  0.305\n2  0.241\n```\n:::\n\n```{.r .cell-code}\nmy_df\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n2     2 two    0.241\n3     3 three  0.194\n4     4 four   0.297\n5     5 five   0.551\n```\n:::\n:::\n\n\n## ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nhead(survey_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggplot2)\nggplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(data = survey_data,\n       mapping = aes(x = wait_time,\n                     y = satisfaction)\n       )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, aes(x = wait_time, y = satisfaction))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-3.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-4.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"red\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-5.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"black\", size = 5) +\n   geom_point(color=\"#fa2fcb\", size = 4) +\n  geom_smooth(method =\"lm\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-6.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction,\n           color = wait_time,\n           size = satisfaction)) + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-7.png){width=672}\n:::\n\n```{.r .cell-code}\nmin(survey_data$wait_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 23\n```\n:::\n\n```{.r .cell-code}\nmax(survey_data$wait_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 314\n```\n:::\n\n```{.r .cell-code}\nlength(survey_data$wait_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 707\n```\n:::\n\n```{.r .cell-code}\nggplot(data=survey_data, mapping= aes(x=wait_time))+\n  geom_histogram(bins=50, color=\"red\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-8.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}