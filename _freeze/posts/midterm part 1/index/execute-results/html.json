{
  "hash": "14ee4ff8a356bf49734b01f280869896",
  "result": {
    "markdown": "---\ntitle: \"midterm part 1\"\nauthor: \"rachel babadzhanov\"\n---\n\n\n# R Object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_string <- \"Hello, world!\"\n\nmy_num <- 42.5\n\nmy_int <- 42L\n\nmy_logical <- TRUE\n\nmy_data_frame <- data.frame(name = c(\"John\", \"Jane\", \"Bob\"), age = c(25, 30, 35))\n\n\nmy_list <- list(name = \"John\", age = 25, favorite_foods = c(\"pizza\", \"tacos\", \"sushi\"))\n\n\nmy_string[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmy_num[1] <- 50\n```\n:::\n\n\n#logical operations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 == 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n2 > 1 & 3 > 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n2 > 1 | 3 < 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n# loops\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:5) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n### equal to ==\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 == 1 # is 1 equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n1 == 2 # is 1 equal to 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) == c(2, 1, 3) # compares each element with each element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n1 == c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n### not equal to !=\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 != 1 # is 1 not equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n1 != 2 # is 1 not equal to 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) != c(2, 1, 3) # compares each element with each element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n1 != c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\n### Greater than/ less than\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 > 1 # is 1 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n5 > 1 # is 5 greater than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3 < 2 # is 3 less than 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n3 < 1 # is 3 less than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) > c(2, 1, 3) # ask the question element by element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) < c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\n2 > c(1, 2, 3) # is greater than each of the numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE\n```\n:::\n:::\n\n\n### \\>= \\<=\n\nIs something greater than or equal to something else\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 >= 1 # is 1 greater than or equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n5 >= 1 # is 5 greater than or equal to 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n3 <= 2 # is 3 less than 2?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n3 <= 1 # is 3 less than 1?\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) >= c(2, 1, 3) # ask the question element by element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) <= c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\n2 >= c(1, 2, 3) # is greater than each of the numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE FALSE\n```\n:::\n:::\n\n\n### AND\n\nThe ampersand `&` is used for AND, which allows use to evaluate whether two or more properties are all TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# is 16 divisible by 4 AND 8\n16 %% 4 == 0 & 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# is 16 divisible by 4 AND 3\n16 %% 4 == 0 & 16 %% 3 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n\n```{.r .cell-code}\n# is 16 divisible by 8 and 4 and 2\n16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n16 %% 4 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n16 %% 2 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### OR\n\nThe `|` is used for OR, which allows use to evaluate at least one of the properties is TRUE.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# is 16 divisible by 4 OR 8\n16 %% 4 == 0 | 16 %% 8 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# is 16 divisible by 4 OR 3\n# it is divisible by 4, so the answer is TRUE\n# because at least one of the comparisons is TRUE\n16 %% 4 == 0 | 16 %% 3 == 0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\nTRUE | FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n### TRUE FALSE\n\nWhen R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3) == c(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE TRUE TRUE\n```\n:::\n\n```{.r .cell-code}\nsum(c(1, 2, 3) == c(1, 2, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nc(1, 2, 3) == c(2, 1, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nsum(c(1, 2, 3) == c(2, 1, 3))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n\n## IF ELSE\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(rbinom(10,1,.5)) # this is what happens if a is not 1\n  1+1\n  print(\"hello world\")\n  rbinom(10,1,.5)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 0 1 1 1 1 0 0 0 1\n[1] \"hello world\"\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0 1 1 0 1 1 0 1 0 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 3.5\nif(a >= 4){\n  print(\"get to go on the cyclone\")\n}\nif(a < 4){\n  print(\"sorry\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"sorry\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5) {\n  print(\"hello\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# show the value of i each step of the loop\nfor(i in 1:5) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the vector to loop over in advance\nx <- 1:5\nfor (i in x) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nfor(i in 1:5){\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx <- 1:5\nfor (matt in x) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n[1] 5\n[1] 5\n[1] 5\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nx <- 1:5\nfor (matt in x) {\n  print(matt)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reminder that i becomes the next value in the vector\n# your vector can have any order \nmy_sequence <- c(1, 5, 2, 3, 4)\nfor (i in my_sequence) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 5\n[1] 2\n[1] 3\n[1] 4\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# index vector does not need to be numbers\nmy_things <- c(\"A\", \"B\", \"C\", \"D\")\nfor (i in my_things) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"A\"\n[1] \"B\"\n[1] \"C\"\n[1] \"D\"\n```\n:::\n:::\n\n\n### Breaking a loop\n\n`break` stops a loop. Used with logical statements to define the conditions necessary to cause the break.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor(i in 1:10) {\n  if (i < 5) {\n    print(i)\n  } else{\n    break\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n```\n:::\n:::\n\n\n### While loops\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i <- i + 1 #add one eachs step of the loop\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n\n### Repeat loops\n\nSimilar to while, but let's do things until a condition is met.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 0\nrepeat {\n  i <- i + 1\n  print(i)\n  if (i == 5) {\n    break\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- 0\nrepeat {\n    i <- i + 1\n    \n    if (i == 5) {\n      break\n    }\n    \n    print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n```\n:::\n:::\n\n\n#functions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sum <- function(a, b) {\n  return(a + b)\n}\n\nmy_sum(2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfunction_name <- function(input1, input2) {\n  #code here\n  return(something)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# define the function\nprint_hello_world <- function() {\n  return(print(\"hello world\"))\n}\nprint_hello_world\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfunction() {\n  return(print(\"hello world\"))\n}\n```\n:::\n\n```{.r .cell-code}\nprint_hello_world()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"hello world\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nreturn_input <- function(input) {\n  return(input)\n}\nreturn_input(input = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\nreturn_input(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_one <- function(my_number) {\n  temp <- my_number + 1\n  return(temp)\n}\nadd_one(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 5 / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.5\n```\n:::\n\n```{.r .cell-code}\n(1 + 5) / 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n1 + 4 / 4 + 6\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n(1+4) / (4+6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n:::\n\n\nPut numbers into variables, do simple math on the variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\n a<-1\n b<-3\n g<-5\n \n (a+b) / g\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.8\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}