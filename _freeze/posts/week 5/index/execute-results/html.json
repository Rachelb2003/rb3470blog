{
  "hash": "309647c87a199fbfd1a5813f11e9d0c9",
  "result": {
    "markdown": "---\ntitle: \"week 5\"\n---\n\n\n# Load libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)     # includes readr & tibble\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(rio)           # for almost any data import/export\nlibrary(haven)         # for SPSS, Stata,and SAS files\nlibrary(readxl)        # for Excel files\nlibrary(googlesheets4) # for Google Sheets\n```\n:::\n\n\n# Options for viewing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(cars) # make data from R package available in global environment\n#View(cars) # view in editor pane\n#print(cars) # print to console\n#cars # print to console\n\n# show columns as rows\nglimpse(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 50\nColumns: 2\n$ speed <dbl> 4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13…\n$ dist  <dbl> 2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34…\n```\n:::\n\n```{.r .cell-code}\n#show first 10 lines of table\nhead(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n```\n:::\n\n```{.r .cell-code}\n# print nicely to web\nknitr::kable(head(cars))\n```\n\n::: {.cell-output-display}\n| speed| dist|\n|-----:|----:|\n|     4|    2|\n|     4|   10|\n|     7|    4|\n|     7|   22|\n|     8|   16|\n|     9|   10|\n:::\n:::\n\n\n\n# Produce summaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(cars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(summarytools)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in fun(libname, pkgname): couldn't connect to display \":0\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nsystem might not have X11 capabilities; in case of errors when using dfSummary(), set st_options(use.x11 = FALSE)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'summarytools'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tibble':\n\n    view\n```\n:::\n\n```{.r .cell-code}\n#view(dfSummary(starwars))\n```\n:::\n\n\n# Importing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio)\n\ndemo_tsv <- import(file = \"demo.tsv\")\n\nglimpse(demo_tsv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <chr> \"high\", \"low\", \"med\", \"high\", \"low\", \"med\"\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <IDate> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n```\n:::\n\n```{.r .cell-code}\ndemo_tsv$factor <- as.factor(demo_tsv$factor)\n\nglimpse(demo_tsv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <fct> high, low, med, high, low, med\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <IDate> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n```\n:::\n\n```{.r .cell-code}\ndemo_tsv$\ndemo_tsv$factor\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo_tsv  <- import(\"demo.tsv\")  # tab-separated values\ndemo_csv  <- import(\"demo.csv\")  # comma-separated values\ndemo_xls  <- import(\"demo.xlsx\") # Excel format\ndemo_sav  <- import(\"demo.sav\")  # SPSS format\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngs4_deauth() # skip authorisation for public data\n\ndemo_gs4  <- googlesheets4::read_sheet(\n  ss = \"16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\"\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Reading from \"demo\".\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ Range 'Sheet1'.\n```\n:::\n\n```{.r .cell-code}\ngs4_get(ss = \"16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSpreadsheet name: demo\n              ID: 16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\n          Locale: en_US\n       Time zone: Europe/London\n     # of sheets: 1\n\n(Sheet name): (Nominal extent in rows x columns)\n      Sheet1: 1000 x 26\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndemo <- readr::read_csv(\"demo.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): character, factor\ndbl  (2): integer, double\nlgl  (1): logical\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nspec(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ncols(\n  character = col_character(),\n  factor = col_character(),\n  integer = col_double(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"\")\n)\n```\n:::\n\n```{.r .cell-code}\ncorrected_cols <- cols(\n  character = col_character(),\n  factor = col_factor(levels = c(\"low\", \"med\", \"high\")),\n  integer = col_integer(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"%Y-%m-%d\")\n)\n\ndemo <- readr::read_csv(\"demo.csv\", col_types = corrected_cols)\n\nglimpse(demo)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <fct> high, low, med, high, low, med\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <date> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n```\n:::\n:::\n\n\n\n# Write your own data\n\n\n::: {.cell}\n\n```{.r .cell-code}\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE,\n  numbers = c(1,2,3),\n  more_numbers = 1:3,\n  even_more = seq(1,3,1)\n)\n\n# print it\navatar\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 6\n  name   bends friendly numbers more_numbers even_more\n  <chr>  <chr> <lgl>      <dbl>        <int>     <dbl>\n1 Katara water TRUE           1            1         1\n2 Toph   earth TRUE           2            2         2\n3 Sokka  <NA>  TRUE           3            3         3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\navatar_by_row <- tribble(\n  ~name,    ~bends,  ~friendly, ~numbers,\n  \"Katara\", \"water\", TRUE, 1L,\n  \"Toph\",   \"earth\", TRUE, 2L,\n  \"Sokka\",  NA,      TRUE, 3L\n)\navatar_by_row\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 4\n  name   bends friendly numbers\n  <chr>  <chr> <lgl>      <int>\n1 Katara water TRUE           1\n2 Toph   earth TRUE           2\n3 Sokka  <NA>  TRUE           3\n```\n:::\n:::\n\n\n# Export data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexport(avatar, \"avatar.csv\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}