{
  "hash": "ce4a43f87557193d52c3e12a3ed6c5d2",
  "result": {
    "markdown": "---\ntitle: \"week 10\"\nauthor: \"rachel babadzhanov\"\n---\n\n\n\n\n## look at untidy data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuntidy_data <- read_csv(\"data/untidy_data.csv\", show_col_types = FALSE)\nknitr::kable(untidy_data)\n```\n\n::: {.cell-output-display}\n| customer_id|itemsprice_2018 |itemsprice_2019 |itemsprice_2020 | totalprice_2018| totalprice_2019| totalprice_2020|\n|-----------:|:---------------|:---------------|:---------------|---------------:|---------------:|---------------:|\n|           1|2 (3.91)        |8 (4.72)        |10 (5.59)       |            7.82|           37.76|           55.90|\n|           2|1 (3.91)        |6 (4.72)        |1 (5.59)        |            3.91|           28.32|            5.59|\n|           3|4 (3.91)        |5 (4.72)        |5 (5.59)        |           15.64|           23.60|           27.95|\n|           4|10 (3.91)       |1 (4.72)        |3 (5.59)        |           39.10|            4.72|           16.77|\n|           5|3 (3.91)        |9 (4.72)        |8 (5.59)        |           11.73|           42.48|           44.72|\n:::\n:::\n\n\n## look at tidy data\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_data <- read_csv(\"data/tidy_data.csv\", show_col_types = FALSE)\nknitr::kable(tidy_data)\n```\n\n::: {.cell-output-display}\n| customer_id| year| items| price_per_item| totalprice|\n|-----------:|----:|-----:|--------------:|----------:|\n|           1| 2018|     2|           3.91|       7.82|\n|           1| 2019|     8|           4.72|      37.76|\n|           1| 2020|    10|           5.59|      55.90|\n|           2| 2018|     1|           3.91|       3.91|\n|           2| 2019|     6|           4.72|      28.32|\n|           2| 2020|     1|           5.59|       5.59|\n|           3| 2018|     4|           3.91|      15.64|\n|           3| 2019|     5|           4.72|      23.60|\n|           3| 2020|     5|           5.59|      27.95|\n|           4| 2018|    10|           3.91|      39.10|\n|           4| 2019|     1|           4.72|       4.72|\n|           4| 2020|     3|           5.59|      16.77|\n|           5| 2018|     3|           3.91|      11.73|\n|           5| 2019|     9|           4.72|      42.48|\n|           5| 2020|     8|           5.59|      44.72|\n:::\n:::\n\n\n## selecting columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select just the customer ID and 3 total price columns\nwide_totalprice <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\n# wide_totalprice <- select(\n#   .data = untidy_data,\n#   customer_id, \n#   totalprice_2018,\n#   totalprice_2019,\n#   totalprice_2020\n# ) %>%\n#   rename(\n#   `2018` = totalprice_2018,\n#   `2019` = totalprice_2019,\n#   `2020` = totalprice_2020\n#   )\n# \n# \n# wide_totalprice <- untidy_data[,]\nuntidy_data[ , c(1,5,6,7) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  customer_id totalprice_2018 totalprice_2019 totalprice_2020\n        <dbl>           <dbl>           <dbl>           <dbl>\n1           1            7.82           37.8            55.9 \n2           2            3.91           28.3             5.59\n3           3           15.6            23.6            28.0 \n4           4           39.1             4.72           16.8 \n5           5           11.7            42.5            44.7 \n```\n:::\n\n```{.r .cell-code}\nuntidy_data[ , c(1,5:7) ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 4\n  customer_id totalprice_2018 totalprice_2019 totalprice_2020\n        <dbl>           <dbl>           <dbl>           <dbl>\n1           1            7.82           37.8            55.9 \n2           2            3.91           28.3             5.59\n3           3           15.6            23.6            28.0 \n4           4           39.1             4.72           16.8 \n5           5           11.7            42.5            44.7 \n```\n:::\n:::\n\n## pivot the table longer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice,\n  cols = 2:4,\n  names_to = \"year\",\n  values_to = \"totalprice\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(long_totalprice, aes(x = totalprice, fill = year)) +\n  geom_histogram(binwidth = 10, color = \"black\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## pivot wider\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwide_by_customer <- pivot_wider(\n  data = long_totalprice,\n  id_cols = year, # identifying column(s)\n  names_from = customer_id, # the new column names\n  names_prefix = \"C_\", # prefix for new column names\n  values_from = totalprice # the new column values\n)\nwide_by_year <- pivot_wider(\n  data = long_totalprice,\n  id_cols = customer_id, # identifying column(s)\n  names_from = year, # the new column names\n  values_from = totalprice # the new column values\n)\n```\n:::\n\n\n## multi-step tidying\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", # regex \n    replacement = \"\"\n  )\n)\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n```\n:::\n\n```{.r .cell-code}\n# check the data types\nglimpse(tidy_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 15\nColumns: 5\n$ customer_id    <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…\n```\n:::\n:::\n\n\n\n## convert messy to tidy\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy_data_2 <- read_csv(file = \"data/untidy_data.csv\",\n                      show_col_types = FALSE) %>%\n  pivot_longer(\n    cols = itemsprice_2018:totalprice_2020,\n    names_to = c(\"category\", \"year\"),\n    names_sep = \"_\", \n    values_to = \"value\", \n    names_transform = list(year = as.integer),\n    values_transform = list(value = as.character) \n  ) %>%\n  pivot_wider(\n    id_cols = c(customer_id, year),\n    names_from = category,\n    values_from = value\n  ) %>%\n  separate(\n    col = itemsprice,\n    into = c(\"items\", \"price_per_item\"),\n    sep = \" \", \n    remove = TRUE, \n    convert = TRUE\n  ) %>%\n  mutate(\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item, \n      pattern = \"[()]\", \n      replacement = \"\"\n    )\n  ) %>%\n  type_convert(\n    trim_ws = TRUE\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n```\n:::\n:::",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}