[
  {
    "objectID": "posts/week 12/index.html",
    "href": "posts/week 12/index.html",
    "title": "week 12",
    "section": "",
    "text": "library(tidyverse)   # data wrangling functions\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(ggthemes)    # for themes\nlibrary(patchwork)   # for combining plots\nlibrary(plotly)      # for interactive plots\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n# devtools::install_github(\"hrbrmstr/waffle\")\nlibrary(waffle)      # for waffle plots\nlibrary(ggbump)      # for bump plots\nlibrary(treemap)     # for treemap plots\nlibrary(ggwordcloud) # for word clouds\nlibrary(tidytext)    # for manipulating text for word clouds\nlibrary(sf)          # for mapping geoms\n\nLinking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE\n\nlibrary(rnaturalearth) # for map data\nlibrary(rnaturalearthdata) # extra mapping data\n\n\nAttaching package: 'rnaturalearthdata'\n\nThe following object is masked from 'package:rnaturalearth':\n\n    countries110\n\nlibrary(gganimate)   # for animated plots\n\ntheme_set(theme_light())\n\n\n# update column specification\nct <- cols(issue_category = col_factor(levels = c(\"tech\", \"returns\", \"sales\", \"other\")))\n\n# load data\nsurvey_data <- read_csv(file = \"data/survey_data.csv\",\n                        col_types = ct)\n\n\n# create bar plot\nbar <- ggplot(data = survey_data, \n              mapping = aes(x = issue_category,\n                            fill = issue_category)) +\n  geom_bar(show.legend = FALSE) +\n  labs(x = \"Issue Category\", \n       y = \"Count\",\n       title = \"Calls by Issue Category\")\n\n\n#create scatterplot\npoint <- ggplot(data = survey_data, \n                mapping = aes(x = wait_time, \n                              y = call_time,\n                              color = issue_category)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = lm, formula = y~x) +\n  labs(x = \"Wait Time\",\n       y = \"Call Time\",\n       color = \"Issue Category\",\n       title = \"Wait Time by Call Time\")\n\n\nbar + point\n\n\n\n\n\nbar +\n  # add left-justified text to the second bar\n  annotate(geom = \"text\",\n           label = \"Our goal is to\\nreduce this\\ncategory\",\n           x = 1.65, y = 150,\n           hjust = 0, vjust = 1, \n           color = \"white\", fontface = \"bold\",\n           angle = 45) +\n  # add a centred label to the third bar\n  annotate(geom = \"label\",\n           label = \"Our goal is\\nto increase this\\ncategory\",\n           x = 3, y = 75,\n           hjust = 0.5, vjust = 1, \n           color = \" darkturquoise\", fontface = \"bold\")\n\n\n\n\n\npoint +\n  # add a rectangle surrounding long call times\n  annotate(geom = \"rect\",\n           xmin = 100, xmax = 275,\n           ymin = 140, ymax = 180,\n           fill = \"transparent\", color = \"red\") +\n  # add a text label\n  annotate(\"text\",\n           x = 260, y = 120,\n           label = \"outliers\") +\n  # add an line with an arrow from the text to the box\n  annotate(geom = \"segment\", \n           x = 240, y = 120, \n           xend = 200, yend = 135,\n           arrow = arrow(length = unit(0.5, \"lines\"))) +\n  # add a curved line with an arrow \n  # from the text to a wait time outlier\n  annotate(geom = \"curve\", \n          x = 280, y = 120, \n          xend = 320, yend = 45,\n          curvature = -0.5,\n          arrow = arrow(length = unit(0.5, \"lines\")))\n\n\n\n\n\nsurvey_data <- read_csv(file = \"data/survey_data.csv\",\n                        show_col_types = FALSE)\n\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nggplot(survey_data, aes(x = wait_time)) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  geom_freqpoly(boundary = 0, binwidth = 15, \n                color = \"black\")\n\n\n\n\n\nggplot(survey_data, aes(x = wait_time)) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  geom_density(fill = \"purple\", color = \"black\")\n\n\n\n\n\nggplotly(point)\n\n\n\n\n\n#treemap\n\nsurvey_data %>% \n  count(issue_category) %>%\n  treemap(\n    index = \"issue_category\", # column with number of rectangles\n    vSize = \"n\", # column with size of rectangle\n    title = \"\",\n    palette = \"BuPu\",\n    inflate.labels = TRUE # expand labels to size of rectangle\n  )\n\n\n\n\n\nsurvey_data %>% \n  count(issue_category, employee_id) %>%\n  arrange(employee_id) %>%\n  treemap(\n    # use c() to specify two variables\n    index = c(\"employee_id\", \"issue_category\"), \n    vSize = \"n\", \n    title = \"\",\n    palette = \"Dark2\",\n    # set different label sizes for each type of label\n    fontsize.labels = c(30, 10), \n    # set different alignments for two label types\n    align.labels = list(c(\"left\", \"top\"), c(\"center\", \"center\")) \n  )\n\n\n\n\n#bump plots\n\n# make a small dataset of scores for 3 people over 3 weeks\nscore_data <- tribble(\n  ~person, ~week_1, ~week_2, ~week_3,\n  \"Abeni\",      80,     75,       90,\n  \"Beth\",       75,     85,       75,\n  \"Carmen\",     60,     70,       80\n)\n\n\n# calculate ranks\nrank_data <- score_data %>%\n  pivot_longer(cols = -person,\n               names_to = \"week\",\n               values_to = \"score\") %>%\n  group_by(week) %>%\n  mutate(rank = n() - rank(score) + 1) %>%\n  ungroup() %>%\n  arrange(week, rank) %>%\n  mutate(week = str_replace(week, \"week_\", \"\") %>% as.integer())\n\nrank_data\n\n# A tibble: 9 × 4\n  person  week score  rank\n  <chr>  <int> <dbl> <dbl>\n1 Abeni      1    80     1\n2 Beth       1    75     2\n3 Carmen     1    60     3\n4 Beth       2    85     1\n5 Abeni      2    75     2\n6 Carmen     2    70     3\n7 Abeni      3    90     1\n8 Carmen     3    80     2\n9 Beth       3    75     3\n\n\n\nggplot(data = rank_data, \n       mapping = aes(x = week, \n                     y = rank, \n                     colour = person)) +\n  ggbump::geom_bump()\n\n\n\n\n\nggplot(data = rank_data, \n       mapping = aes(x = week, \n                     y = rank, \n                     colour = person,\n                     label = person)) +\n  ggbump::geom_bump(size = 10) +\n  scale_x_continuous(name = \"\",\n                     breaks = 1:3, \n                     labels = c(\"Week 1\", \"Week 2\", \"Week 3\"),\n                     expand = expansion(c(.05, .2))) +\n  scale_y_reverse(name = \"Ranking\",\n                  breaks = 1:3, \n                  expand = expansion(.2)) +\n  geom_text(data = filter(rank_data, week == 3),\n            color = \"black\", x = 3.05, hjust = 0) +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_text(size = 12))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n#word clouds\n\n# https://www.kaggle.com/sid321axn/amazon-alexa-reviews\n# extracted from Amazon by Manu Siddhartha & Anurag Bhatt\nalexa <- rio::import(\"data/amazon_alexa.csv\")\n\n\nwords <- alexa %>%\n  unnest_tokens(output = \"word\", input = \"verified_reviews\") %>%\n  count(word, rating, sort = TRUE) \n\n\ncustom_stop <- tibble(word = c(0:9, \"https\", 34))\n\nwords <- alexa %>%\n  unnest_tokens(output = \"word\", input = \"verified_reviews\") %>%\n  count(word, rating) %>%\n  anti_join(stop_words, by = \"word\") %>%\n  anti_join(custom_stop, by = \"word\") %>%\n  group_by(rating) %>%\n  slice_max(order_by = n, n = 25, with_ties = FALSE) %>%\n  ungroup()\n\n\nrating1 <- filter(words, rating == 1) %>%\n  ggplot(aes(label = word, colour = \"red\", size = n)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 10) +\n  ggtitle(\"Rating = 1\") +\n  theme_minimal(base_size = 14)\n\nrating1\n\n\n\n\n\nrating5 <- filter(words, rating == 5) %>%\n  ggplot(aes(label = word, size = n)) +\n  geom_text_wordcloud_area(colour = \"darkolivegreen3\") +\n  scale_size_area(max_size = 12) +\n  ggtitle(\"Rating = 5\") +\n  theme_minimal(base_size = 14)\n\nrating1 + rating5\n\n\n\n\n#maps\n\n# get the world map coordinates\nworld_sf <- ne_countries(returnclass = \"sf\", scale = \"medium\")\n\n# plot them on a light blue background\nggplot() + \n  geom_sf(data = world_sf, size = 0.3) +\n  theme(panel.background = element_rect(fill = \"lightskyblue2\"))"
  },
  {
    "objectID": "posts/my_first_post/index.html",
    "href": "posts/my_first_post/index.html",
    "title": "My First post",
    "section": "",
    "text": "This is an example first post. Whatever you write here will appear inside your post.\nIt is possible to write lists:\nAnd make headers"
  },
  {
    "objectID": "posts/my_first_post/index.html#this-is-a-second-level-heading",
    "href": "posts/my_first_post/index.html#this-is-a-second-level-heading",
    "title": "My First post",
    "section": "This is a second level heading",
    "text": "This is a second level heading\nYou can include images, and many other kinds of content.\nIf you are using the visual editor in Rstudio you can drag images onto the editor to insert them into the document. Otherwise, you need to place the image inside of the folder for this post, and then you can insert it to your post directly, like this:\n\nThe first image in a blog post will also be used on the listings page."
  },
  {
    "objectID": "posts/week 8/index.html",
    "href": "posts/week 8/index.html",
    "title": "week 8",
    "section": "",
    "text": "#data relations"
  },
  {
    "objectID": "posts/week 8/index.html#what-doers-dplyr-mutate-do",
    "href": "posts/week 8/index.html#what-doers-dplyr-mutate-do",
    "title": "week 8",
    "section": "what doers dplyr mutate do?",
    "text": "what doers dplyr mutate do?\n\norders_B <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)\n# add a new column\norders_B %>%\n  mutate(satisfaction = NA)\n\n# A tibble: 9 × 3\n     id items satisfaction\n  <dbl> <dbl> <lgl>       \n1     2    10 NA          \n2     3    18 NA          \n3     4    21 NA          \n4     4    23 NA          \n5     5     9 NA          \n6     5    11 NA          \n7     6    11 NA          \n8     6    12 NA          \n9     7     3 NA          \n\n# add mutiplie new column\norders_B %>%\n  mutate(satisfaction = NA,\n         numbers = 1:9)\n\n# A tibble: 9 × 4\n     id items satisfaction numbers\n  <dbl> <dbl> <lgl>          <int>\n1     2    10 NA                 1\n2     3    18 NA                 2\n3     4    21 NA                 3\n4     4    23 NA                 4\n5     5     9 NA                 5\n6     5    11 NA                 6\n7     6    11 NA                 7\n8     6    12 NA                 8\n9     7     3 NA                 9\n\n# assign back to tibble\norders_B <- orders_B %>%\n              mutate(satisfaction = NA,\n                     numbers = 1:9)\norders_B %>%\n  mutate(numbers_as_strings = as.character(numbers))\n\n# A tibble: 9 × 5\n     id items satisfaction numbers numbers_as_strings\n  <dbl> <dbl> <lgl>          <int> <chr>             \n1     2    10 NA                 1 1                 \n2     3    18 NA                 2 2                 \n3     4    21 NA                 3 3                 \n4     4    23 NA                 4 4                 \n5     5     9 NA                 5 5                 \n6     5    11 NA                 6 6                 \n7     6    11 NA                 7 7                 \n8     6    12 NA                 8 8                 \n9     7     3 NA                 9 9                 \n\norders_B %>%\n  mutate(items_minus_id = items - id)\n\n# A tibble: 9 × 5\n     id items satisfaction numbers items_minus_id\n  <dbl> <dbl> <lgl>          <int>          <dbl>\n1     2    10 NA                 1              8\n2     3    18 NA                 2             15\n3     4    21 NA                 3             17\n4     4    23 NA                 4             19\n5     5     9 NA                 5              4\n6     5    11 NA                 6              6\n7     6    11 NA                 7              5\n8     6    12 NA                 8              6\n9     7     3 NA                 9             -4"
  },
  {
    "objectID": "posts/week 8/index.html#dplyr-filter",
    "href": "posts/week 8/index.html#dplyr-filter",
    "title": "week 8",
    "section": "Dplyr filter",
    "text": "Dplyr filter\n\nfull_data <- full_join(customers, orders, by = \"id\")\n\nWarning in full_join(customers, orders, by = \"id\"): Each row in `x` is expected to match at most 1 row in `y`.\nℹ Row 4 of `x` matches multiple rows.\nℹ If multiple matches are expected, set `multiple = \"all\"` to silence this\n  warning.\n\nfull_data\n\n# A tibble: 10 × 4\n      id city       postcode items\n   <dbl> <chr>      <chr>    <dbl>\n 1     1 Port Ellen PA42 7DU    NA\n 2     2 Dufftown   AB55 4DH    10\n 3     3 <NA>       <NA>        18\n 4     4 Aberlour   AB38 7RY    21\n 5     4 Aberlour   AB38 7RY    23\n 6     5 Tobermory  PA75 6NR     9\n 7     5 Tobermory  PA75 6NR    11\n 8     6 <NA>       <NA>        11\n 9     6 <NA>       <NA>        12\n10     7 <NA>       <NA>         3\n\nfull_data %>%\n  filter(items > 10)\n\n# A tibble: 6 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     3 <NA>      <NA>        18\n2     4 Aberlour  AB38 7RY    21\n3     4 Aberlour  AB38 7RY    23\n4     5 Tobermory PA75 6NR    11\n5     6 <NA>      <NA>        11\n6     6 <NA>      <NA>        12\n\nfull_data %>%\n  filter(postcode == \"AB38 7RY\")\n\n# A tibble: 2 × 4\n     id city     postcode items\n  <dbl> <chr>    <chr>    <dbl>\n1     4 Aberlour AB38 7RY    21\n2     4 Aberlour AB38 7RY    23\n\nfull_data %>%\n  filter(postcode == \"AB38 7RY\" & items > 21)\n\n# A tibble: 1 × 4\n     id city     postcode items\n  <dbl> <chr>    <chr>    <dbl>\n1     4 Aberlour AB38 7RY    23\n\nfull_data %>%\n  filter(postcode == \"AB38 7RY\",\n         items > 21)\n\n# A tibble: 1 × 4\n     id city     postcode items\n  <dbl> <chr>    <chr>    <dbl>\n1     4 Aberlour AB38 7RY    23\n\nfull_data %>%\n  filter(city != \"Aberlour\")\n\n# A tibble: 4 × 4\n     id city       postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     2 Dufftown   AB55 4DH    10\n3     5 Tobermory  PA75 6NR     9\n4     5 Tobermory  PA75 6NR    11\n\nfull_data %>%\n  filter( is.na(city) == FALSE,\n          is.na(items) == FALSE)\n\n# A tibble: 5 × 4\n     id city      postcode items\n  <dbl> <chr>     <chr>    <dbl>\n1     2 Dufftown  AB55 4DH    10\n2     4 Aberlour  AB38 7RY    21\n3     4 Aberlour  AB38 7RY    23\n4     5 Tobermory PA75 6NR     9\n5     5 Tobermory PA75 6NR    11\n\nfull_data %>%\n  filter( is.na(city) == TRUE | is.na(items) == TRUE)\n\n# A tibble: 5 × 4\n     id city       postcode items\n  <dbl> <chr>      <chr>    <dbl>\n1     1 Port Ellen PA42 7DU    NA\n2     3 <NA>       <NA>        18\n3     6 <NA>       <NA>        11\n4     6 <NA>       <NA>        12\n5     7 <NA>       <NA>         3"
  },
  {
    "objectID": "posts/week 7/index.html",
    "href": "posts/week 7/index.html",
    "title": "week 7",
    "section": "",
    "text": "##Make vectors before, then tibble, then GGPLOT\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\ngrades <- c(2.5, 8, 4)\nstudents <- c(\"A\" , \"B\", \"C\")\nstudent_performance <- tibble(grades, students)\n\n# alternate Syntax\n\nstudent_performance2 <- tibble(\n  grades = c(2.5, 8, 4),\n  students =c(\"A\",\"B\",\"C\")\n \n)\n#this has a Y limiter\nggplot(data=student_performance, aes(x=students, y=grades))+\n  geom_bar(stat= \"identity\", fill = \"white\" , color = \"blue\")+\n  scale_y_continuous(breaks = 0:10,limits = c(0,10))+\n  theme_classic(base_size = 12) +\n  geom_text(label = grades, position = position_dodge(width =.9) , vjust = .001)+\n  xlab(\"Students\")+\n  ylab(\"Grades\")+\n  ggtitle(\"Student Performance\")\n\n\n\n\n\nfactor_one <- rep(rep(as.factor(c(\"A\", \"B\", \"C\")), 2), 2)\nfactor_two <- rep(rep(as.factor(c(\"IIA\", \"IIB\")), 3), 2)\nfactor_three <- rep(as.factor(c(\"IIIA\", \"IIIB\")), each = 6)\ndv_means <- c(20, 30, 40, 20, 40, 40,\n            10, 20, 50, 50, 10, 10)\ndv_SEs   <- c(4, 3.4, 4, 3, 2, 4,\n            1, 2, 1, 2, 3, 2)\nplot_df <- data.frame(factor_one,\n                    factor_two,\n                    factor_three,\n                    dv_means,\n                    dv_SEs)\n\n# basic bar graph\n\nggplot(plot_df,\n    aes(\n        x = factor_one,\n        y = dv_means,\n        group = factor_two,\n        fill = factor_two\n    )) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap( ~ factor_three)\n\n\n\n\n\nstudies <- rep(c(\"Doctor \\n Study 1 \\n N = 199\",\n             \"Butcher \\n Study 2 \\n n = 199\",\n             \"Firefighter \\n Study 2 \\n n = 200\",\n             \"Construction \\n Worker \\n Study 2 \\n n = 205\"), each=3)\nlikely <- rep(c(\"Women More Likely\",\n            \"Equally Likely\",\n            \"Man more Likely\"),4)\n\npp <- c(0,90,10,\n        5,60,35,\n        2,40,58,\n        5,60,35)/100\n\nplot_df <- data.frame(pp,studies,likely)\n\nplot_df$likely <- factor(plot_df$likely, \n                         levels = c(\"Women More Likely\",\n                                    \"Equally Likely\",\n                                    \"Man more Likely\"))\n\nplot_df$studies <- factor(plot_df$studies, \n                         levels = c(\"Doctor \\n Study 1 \\n N = 199\",\n             \"Butcher \\n Study 2 \\n n = 199\",\n             \"Firefighter \\n Study 2 \\n n = 200\",\n             \"Construction \\n Worker \\n Study 2 \\n n = 205\"))\n\nggplot(plot_df, aes(x=studies,\n                    y=pp,\n                    group=likely,\n                    fill=likely))+\n  geom_bar(stat=\"identity\", width=.5)+\n  theme_classic(base_size=10)+\n  xlab(\"\")+\n  ylab(\"Percentage of Participants\")+\n  scale_y_continuous(breaks=seq(0,1,.1),labels = scales::percent)+\n  theme(legend.title = element_blank(),\n        axis.ticks.x.bottom = element_blank())\n\n\n\n\n##ggplot2 - Grammar of Graphics | aes (Aestetics)\n\n#Lets put the data into a variable \nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Blank page\nggplot()\n\n\n\n#x and Y values \nggplot(data = survey_data, \n       mapping = aes(x= wait_time, \n                     y= satisfaction))\n\n\n\n#+ time \nggplot(data = survey_data, \n              aes(x= wait_time, \n                  y= satisfaction)) +\n    geom_point(color = \"black\", size=5)+ \n    geom_point(color = \"pink\", size=4)+\n    geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n##Summon CSV and put it into Survey_data\nggplot(data = survey_data, \n      aes(x= wait_time, \n          y= satisfaction, \n          color = satisfaction,\n          size = satisfaction))+\n  geom_point()\n\n\n\nmin(survey_data$wait_time)\n\n[1] 23\n\nmax(survey_data$wait_time)\n\n[1] 314\n\nlength(survey_data$wait_time)\n\n[1] 707\n\nggplot(data=survey_data, mapping = aes(x= wait_time))+\n  geom_histogram(bins=50 , color=\"green\")\n\n\n\n\nFill is the inside of the shape Dv = dependent variable dv_SEs Geom_errorbar(aes(x = , y = ))\n\nlibrary(ggpubr)\n\nCondition <-rep(c(\"No \\n Transient\",\"Transient\"), each=2)\nLocation <-rep(c(\"Outside\",\"Inside\"),2)\nMMRT <- c(304,300,290,280)\nCI_upper <-c(315,310,304,290)\nCI_lower <-c(295,290,283,270)\nplot_df <-data.frame(Condition,Location,MMRT,CI_upper,CI_lower)\nplot_df$Location <- factor(plot_df$Location, \n                         levels = c(\"Outside\",\"Inside\"))\n\nvis<-ggplot(plot_df, aes(x=Condition, y=MMRT, group=Location,\n                    fill=Location))+\n  geom_bar(stat=\"identity\",position=\"dodge\", \n           color=\"black\",\n           size=.25)+\n  theme_classic()+\n  ylab(\"Mean Median RT (ms)\")+\n  coord_cartesian(ylim=c(230,340))+\n  scale_y_continuous(breaks=seq(230,340,10))+\n  scale_fill_brewer(palette=\"Greys\", direction=-1)+\n   theme(legend.position=c(0.55,0.8),\n        legend.title=element_blank(),\n        legend.key.size = unit(.5, \"cm\"))+\n  ggtitle(\"Visual Group\")\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nCondition <-rep(c(\"No \\n Transient\",\"Transient\"), each=2)\nLocation <-rep(c(\"Outside\",\"Inside\"),2)\nMMRT <- c(295,290,265,250)\nCI_upper <-c(305,300,275,260)\nCI_lower <-c(285,280,255,240)\nplot_df <-data.frame(Condition,Location,MMRT,CI_upper,CI_lower)\nplot_df$Location <- factor(plot_df$Location, \n                         levels = c(\"Outside\",\"Inside\"))\n\naud<-ggplot(plot_df, aes(x=Condition, y=MMRT, group=Location,\n                    fill=Location))+\n  geom_bar(stat=\"identity\",position=\"dodge\", \n           color=\"black\",\n           size=.25)+\n  theme_classic()+\n  ylab(\"Mean Median RT (ms)\")+\n  coord_cartesian(ylim=c(230,340))+\n  scale_y_continuous(breaks=seq(230,340,10))+\n  scale_fill_brewer(palette=\"Greys\", direction=-1)+\n   theme(legend.position=\"none\")+\n  ggtitle(\"Auditory Group\")\n\nggarrange(vis,aud)\n\n\n\n\n\npeople <- rep(c(\"Family\",\"Friends\",\"Colleagues\",\"Strangers\"), each=5)\nbig_five <- rep(c(\"Emotional \\n Stability\",\"Extraversion\",\"Openness/ \\n Intellect\",\n              \"Agreeableness\",\"Consientiousness\"), 4)\nmean_difference <-c(0,.3,.8,.4,.4,\n                    c(0,.3,.8,.4,.4)-.2,\n                    c(0,.3,.8,.4,.4)-.21,\n                    c(0,.3,.8,.4,.4)-.25)\ndf <- data.frame(mean_difference,people,big_five)\n\ndf$big_five <- factor(df$big_five, \n                         levels = c(\"Emotional \\n Stability\",\"Extraversion\",\"Openness/ \\n Intellect\",\n              \"Agreeableness\",\"Consientiousness\"))\n\ndf$people <- factor(df$people, \n                         levels = c(\"Family\",\"Friends\",\"Colleagues\",\"Strangers\"))\n\nggplot(df, aes(x=big_five, y=mean_difference,\n               group=people,\n               shape=people,\n               linetype=people,\n               color=people))+\n  scale_color_brewer(palette=\"Greys\", direction=-1)+\n  geom_point()+\n  geom_line()+\n  xlab(\"\")+\n  ylab(\"Mean Difference\")+\n  coord_cartesian(ylim=c(-.8,.8))+\n  scale_y_continuous(breaks=seq(-.8,.8,.2))+\n  theme_classic()+\n  geom_hline(yintercept=0)+\n  theme(axis.line.x.bottom = element_blank(),\n        axis.ticks.x.bottom = element_blank(),\n        legend.title = element_blank())\n\n\n\n\n\nevaluation<-c((seq(1,7,.1)+runif(61,-2,2)),\n              (seq(1,7,.1)+runif(61,-2,2)))\npTarget <-c((seq(.92,.85,length.out=61)+runif(61,-.1,.1)),\n            (seq(.8,.4,length.out=61)+runif(61,-.5,.5)))\nGender <- rep(c(\"Man Communicated with ATC\",\n            \"Woman Communicated with ATC\"), each=61)\nplot_df<-data.frame(evaluation,pTarget,Gender)\nplot_df <- plot_df %>%\n              filter(evaluation>=1,\n                     evaluation<=7)\n\nggplot(plot_df, aes(x=evaluation,y=pTarget,\n                    group=Gender,\n                    color=Gender))+\n  geom_smooth(method=\"lm\")+\n  theme_classic()+\n  scale_y_continuous(breaks=seq(0,1,.1),labels = scales::percent)+\n  scale_x_continuous(breaks=seq(1,7,1))+\n  coord_cartesian(ylim=c(0,1))+\n  xlab(\"Evaluation of Person X\")+\n  ylab(\"P(Target = Pilot)\")+\n  theme(legend.position=c(0.45,0.2),\n        legend.title=element_blank(),\n        legend.key.size = unit(.5, \"cm\"))+\n  theme(legend.key = element_rect(colour = 'white', fill = 'white', size = 1, linetype='solid'))\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nA <- rexp(200)\nB <- rnorm(200,3,sd=1)\nC <- rnorm(200,3,sd=1)\nD <- rnorm(200,3,sd=1)\nDV <- c(A,B,C,D)\nstudies <- rep(c(\"Doctor \\n Study 1 \\n N = 199\",\n             \"Butcher \\n Study 2 \\n n = 199\",\n             \"Firefighter \\n Study 2 \\n n = 200\",\n             \"Construction \\n Worker \\n Study 2 \\n n = 205\"), each=200)\n\nplot_df <-data.frame(DV,studies)\n\nplot_df$studies <- factor(plot_df$studies, \n                         levels = c(\"Doctor \\n Study 1 \\n N = 199\",\n             \"Butcher \\n Study 2 \\n n = 199\",\n             \"Firefighter \\n Study 2 \\n n = 200\",\n             \"Construction \\n Worker \\n Study 2 \\n n = 205\"))\n\nlibrary(dplyr)\n\nmeans_df <- plot_df %>%\n              group_by(studies) %>%\n              summarise(M=mean(DV),\n                        CI_lower = t.test(DV)$conf.int[1],\n                        CI_upper = t.test(DV)$conf.int[2])\n\nggplot(means_df, aes(x=studies,y=M))+\n  geom_violin(data=plot_df, aes(x=studies,y=DV),fill=\"grey\")+\n  theme_classic(base_size=10)+\n  xlab(\"\")+\n  ylab(\"Evaluation of Person X\")+\n  scale_y_continuous(breaks=seq(0,7,1))+\n  coord_cartesian(ylim=c(0,7))+\n  geom_point()+\n  geom_errorbar(aes(ymin=CI_lower,ymax=CI_upper), width=.2)\n\n\n\n\n\nGender <- rep(c(\"Men Performed Surgery \\n n = 152\",\n            \"Women Performed Surgery \\n n = 142\"), each =3)\nParameter <- rep(c(\"Prior\",\n               \"Model \\n Posterior\",\n               \"Reported \\n Posterior\"), 2)\np <- c(.7, .88, .87, .29, .72, .76)\nci <- c(.05, .05, .05, .05, .05, .05)\nplot_df <- data.frame(p, ci, Gender, Parameter)\nplot_df$Parameter <- factor(plot_df$Parameter, \n                         levels = c(\"Prior\",\n               \"Model \\n Posterior\",\n               \"Reported \\n Posterior\"))\n\nggplot(plot_df, aes(x=Parameter, y=p, fill=Parameter))+\n  geom_bar(stat=\"identity\", position=\"dodge\")+\n  facet_wrap(~Gender)+\n  theme_classic(base_size=11)+\n  scale_fill_manual(values=c(\"#F8766D\", \"#7CAE00\", \"#C77CFF\"))+\n  ylab(\"P(Target = Doctor)\")+\n  scale_y_continuous(breaks=seq(0,1,.1),labels = scales::percent)+\n  coord_cartesian(ylim=c(0,1))+\n  theme(panel.grid = element_blank(),\n        panel.spacing.x = unit(0,\"line\"),\n        panel.border = element_blank(),\n        panel.background = element_blank())+\n  theme(strip.background = element_rect(colour = 'white', fill = 'white', size = 0))+\n  theme(legend.position = \"none\")"
  },
  {
    "objectID": "posts/midterm part 1/index.html",
    "href": "posts/midterm part 1/index.html",
    "title": "midterm part 1",
    "section": "",
    "text": "my_string <- \"Hello, world!\"\n\nmy_num <- 42.5\n\nmy_int <- 42L\n\nmy_logical <- TRUE\n\nmy_data_frame <- data.frame(name = c(\"John\", \"Jane\", \"Bob\"), age = c(25, 30, 35))\n\n\nmy_list <- list(name = \"John\", age = 25, favorite_foods = c(\"pizza\", \"tacos\", \"sushi\"))\n\n\nmy_string[2]\n\n[1] NA\n\nmy_num[1] <- 50"
  },
  {
    "objectID": "posts/midterm part 1/index.html#if-else",
    "href": "posts/midterm part 1/index.html#if-else",
    "title": "midterm part 1",
    "section": "IF ELSE",
    "text": "IF ELSE\n\na <- 1 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(\"A is not 1\") # this is what happens if a is not 1\n}\n\n[1] 1\n\n\n\na <- 2 # define a to be a 1\nif (a == 1) {\n  print(a) # this is what happens if a==1\n} else {\n  print(rbinom(10,1,.5)) # this is what happens if a is not 1\n  1+1\n  print(\"hello world\")\n  rbinom(10,1,.5)\n}\n\n [1] 0 1 1 0 0 0 0 1 0 0\n[1] \"hello world\"\n\n\n [1] 0 1 1 0 0 0 1 1 1 1\n\n\n\na <- 3.5\nif(a >= 4){\n  print(\"get to go on the cyclone\")\n}\nif(a < 4){\n  print(\"sorry\")\n}\n\n[1] \"sorry\"\n\n\n\n# Make a loop do something 5 times\n# i is the iterator\n# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5\n# the loop will run 5 times, because there are five things to assign to i\nfor(i in 1:5) {\n  print(\"hello\")\n}\n\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n[1] \"hello\"\n\n\n\n# show the value of i each step of the loop\nfor(i in 1:5) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n# define the vector to loop over in advance\nx <- 1:5\nfor (i in x) {\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\nfor(i in 1:5){\n  print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\nx <- 1:5\nfor (matt in x) {\n  print(i)\n}\n\n[1] 5\n[1] 5\n[1] 5\n[1] 5\n[1] 5\n\nx <- 1:5\nfor (matt in x) {\n  print(matt)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n# Reminder that i becomes the next value in the vector\n# your vector can have any order \nmy_sequence <- c(1, 5, 2, 3, 4)\nfor (i in my_sequence) {\n  print(i)\n}\n\n[1] 1\n[1] 5\n[1] 2\n[1] 3\n[1] 4\n\n\n\n# index vector does not need to be numbers\nmy_things <- c(\"A\", \"B\", \"C\", \"D\")\nfor (i in my_things) {\n  print(i)\n}\n\n[1] \"A\"\n[1] \"B\"\n[1] \"C\"\n[1] \"D\"\n\n\n\nBreaking a loop\nbreak stops a loop. Used with logical statements to define the conditions necessary to cause the break.\n\nfor(i in 1:10) {\n  if (i < 5) {\n    print(i)\n  } else{\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n\n\n\n\nWhile loops\n\ni <- 1 # create an variable\nwhile (i < 6) {\n  print(i)\n  i <- i + 1 #add one eachs step of the loop\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\n\nRepeat loops\nSimilar to while, but let’s do things until a condition is met.\n\ni <- 0\nrepeat {\n  i <- i + 1\n  print(i)\n  if (i == 5) {\n    break\n  }\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n\n\n\ni <- 0\nrepeat {\n    i <- i + 1\n    \n    if (i == 5) {\n      break\n    }\n    \n    print(i)\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4"
  },
  {
    "objectID": "posts/week 9/index.html#number-of-reviews-by-year",
    "href": "posts/week 9/index.html#number-of-reviews-by-year",
    "title": "week 9",
    "section": "Number of reviews by year",
    "text": "Number of reviews by year"
  },
  {
    "objectID": "posts/week 9/index.html#verified-users",
    "href": "posts/week 9/index.html#verified-users",
    "title": "week 9",
    "section": "Verified users",
    "text": "Verified users\n\n\n\n\n\nverified\ncounts\n\n\n\n\nFALSE\n164932\n\n\nTRUE\n332645\n\n\n\n\n\n\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n##Total number of reviews assigned each rating"
  },
  {
    "objectID": "posts/week 9/index.html#by-purchase-status",
    "href": "posts/week 9/index.html#by-purchase-status",
    "title": "week 9",
    "section": "By purchase status",
    "text": "By purchase status\n\n#Get number of reviews per year\n\nrating_by_verified_counts <- review_data %>%\n  group_by(rating,verified) %>%\n  summarize(counts = n())\n\n`summarise()` has grouped output by 'rating'. You can override using the\n`.groups` argument.\n\n#ggplot(data = reviews_by_year, mapping = aes(x=year, y=counts))\n#ggplot(reviews_by_year, aes(x=year, y=counts))\n\n# plot\n\nggplot(data = rating_by_verified_counts, \n       mapping = aes(x=rating, \n                     y=counts, \n                     group = verified,\n                     fill = verified))+\n  geom_bar(stat= \"identity\", position = \"dodge\")+\n  xlab(\"\")+\n  ylab(\"\")+\n  ggtitle(\"Review Ratings\",\n          subtitle = \"By purchase status\")+\n  theme(\n    panel.background = element_rect(fill = \"lightgrey\",\n                                colour = \"lightgrey\",\n                                linewidth = 0.5, linetype = \"solid\"),\n    panel.grid.major=element_line(colour=\"black\",linewidth = .05),\n    panel.grid.minor=element_line(colour=\"lightgrey\"))"
  },
  {
    "objectID": "posts/week 9/index.html#by-purchase-status-1",
    "href": "posts/week 9/index.html#by-purchase-status-1",
    "title": "week 9",
    "section": "By purchase status",
    "text": "By purchase status\nAverage ratings for verified reviews were higher (both mean and median) than for unverified review, likely driven by the number of 5-star reviews for verified reviews.\n\n\n\n\nTable 1: Average ratings by purchase status\n\n\nVerified\nMean rating\nMedian rating\n\n\n\n\nFALSE\n3.91\n4\n\n\nTRUE\n4.37\n5"
  },
  {
    "objectID": "posts/week 9/index.html#by-year-and-purchase-status",
    "href": "posts/week 9/index.html#by-year-and-purchase-status",
    "title": "week 9",
    "section": "By year and purchase status",
    "text": "By year and purchase status\n\nyear_rating_status <- review_data %>%\n  group_by(year,verified) %>%\n  summarise(mean_rating = mean(rating),.groups = 'drop')\n  \n# plot\n\nggplot(data = year_rating_status, \n       mapping = aes(x=year, \n                     y=mean_rating, \n                     group = verified,\n                     color = verified))+\n  geom_line()+\n  geom_point()+\n  scale_x_continuous(breaks = 1999:2018)+\n  scale_color_manual(values = c('#1b9e77','#d95f02'))+\n  theme(axis.text.x = element_text(angle = 85, vjust = 1, hjust=1))+\n  xlab(\"\")+\n  ylab(\"\")+\n  ggtitle(\"Average Ratings\",\n          subtitle = \"By year and purchase status\")+\n  theme(\n    panel.background = element_rect(fill = \"lightgrey\",\n                                colour = \"lightgrey\",\n                                linewidth = 0.5, linetype = \"solid\"),\n    panel.grid.major=element_line(colour=\"black\",linewidth = .05),\n    panel.grid.minor=element_line(colour=\"lightgrey\"))"
  },
  {
    "objectID": "posts/week 11/index.html",
    "href": "posts/week 11/index.html",
    "title": "week 11",
    "section": "",
    "text": "library(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ readr     2.1.4\n✔ ggplot2   3.4.1     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.1.8\n✔ purrr     1.0.1     ✔ tidyr     1.3.0\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors"
  },
  {
    "objectID": "posts/week 11/index.html#select",
    "href": "posts/week 11/index.html#select",
    "title": "week 11",
    "section": "Select",
    "text": "Select\n\n# select single column by name\nproduct_dat <- budget %>% \n  select(product) \n# select single column by number\nproduct_dat <- budget %>% select(2) \n# select single column by number\nproduct_dat <- budget %>% select(2,3) \n\n\n#print columns 2 and 3\nbudget %>% select(2,3)\n\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n\n\n\nproduct_dat <- budget %>% select(2) \nproduct_dat\n\n# A tibble: 8 × 1\n  product\n  <chr>  \n1 widgets\n2 gadgets\n3 widgets\n4 gadgets\n5 widgets\n6 gadgets\n7 widgets\n8 gadgets\n\n\n\nproduct_dat <- budget %>% select(2,3) \nknitr::kable(product_dat)\n\n\n\n\nproduct\nsales_2019\n\n\n\n\nwidgets\n2129\n\n\ngadgets\n723\n\n\nwidgets\n1123\n\n\ngadgets\n2022\n\n\nwidgets\n-728\n\n\ngadgets\n-423\n\n\nwidgets\n633\n\n\ngadgets\n1204\n\n\n\n\n\n\n( product_dat <- budget %>% select(2,3) )\n\n# A tibble: 8 × 2\n  product sales_2019\n  <chr>        <dbl>\n1 widgets       2129\n2 gadgets        723\n3 widgets       1123\n4 gadgets       2022\n5 widgets       -728\n6 gadgets       -423\n7 widgets        633\n8 gadgets       1204\n\n\n\ncolon notation\n\n# select columns individually\nsales2019 <- budget %>% select(region, product, sales_2019)\n# select columns with colon\nsales2019 <- budget %>% select(region:sales_2019)\nsales2019\n\n# A tibble: 8 × 3\n  region product sales_2019\n  <chr>  <chr>        <dbl>\n1 North  widgets       2129\n2 North  gadgets        723\n3 South  widgets       1123\n4 South  gadgets       2022\n5 East   widgets       -728\n6 East   gadgets       -423\n7 West   widgets        633\n8 West   gadgets       1204\n\n# select columns with colon\nyears <- budget %>% select(3:7)\nyears <- budget %>% select(sales_2019:satisfaction_2020)\n\n\n\nUNSELECT\n\n# de-select individual columns\nsales <- budget %>% select(-expenses_2019, -expenses_2020)\n# de-select a range of columns\nsales <- budget %>% select(-(expenses_2019:expenses_2020))"
  },
  {
    "objectID": "posts/week 11/index.html#filter",
    "href": "posts/week 11/index.html#filter",
    "title": "week 11",
    "section": "FILTER",
    "text": "FILTER\n\n# select all rows where region equals North\nbudget %>% filter(region == \"North\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where expenses_2020 were exactly equal to 200\nbudget %>% filter(expenses_2020 == 200)\n\n# A tibble: 1 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  gadgets       2022       -945          -610         200 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# select all rows where sales_2019 was more than 100\nbudget %>% filter(sales_2019 > 100)\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  widgets       1123      -1450          1004         672 high    neutral\n4 South  gadgets       2022       -945          -610         200 low     low    \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# everything but the North\nbudget %>% filter(region != \"North\")\n\n# A tibble: 6 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 South  widgets       1123      -1450          1004         672 high    neutral\n2 South  gadgets       2022       -945          -610         200 low     low    \n3 East   widgets       -728        -51          -801        -342 very l… very l…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 West   gadgets       1204        426           433        -136 low     low    \n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n\n\n# regions and products with profit in both 2019 and 2020\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019,\n    sales_2020 > expenses_2020\n  )\n# the same as above, using & instead of a comma\nprofit_both <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 &\n    sales_2020 > expenses_2020\n  )\n# regions and products with profit in 2019 or 2020\nprofit_either <- budget %>% \n  filter(\n    sales_2019 > expenses_2019 |\n    sales_2020 > expenses_2020\n  )\n# 2020 profit greater than 1000\nprofit_1000 <- budget %>%\n  filter(sales_2020 - expenses_2020 > 1000)\n\n\nin\n\n# retain any rows where region is north or south, and where product equals widget\nbudget %>%\n  filter(region %in% c(\"North\", \"South\"),\n         product == \"widgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n# retain any rows where the region is not east or west, and where the product does not equal gadgets\nbudget %>%\n  filter(!region %in% c(\"East\", \"West\"),\n         product != \"gadgets\")\n\n# A tibble: 2 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 North  widgets       2129       -517           822        -897 high    very h…\n2 South  widgets       1123      -1450          1004         672 high    neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\n\n\na <- c(1,2,3,4,5)\n6 %in% a\n\n[1] FALSE\n\n1 %in% a\n\n[1] TRUE\n\nif(1 %in% a == TRUE) {\n  \"yes\"\n}\n\n[1] \"yes\"\n\nif(6 %in% a == FALSE) {\n  \"yes\"\n}\n\n[1] \"yes\"\n\nletters\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\nLETTERS\n\n [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\nwhich(letters %in% \"g\", arr.ind = TRUE)\n\n[1] 7"
  },
  {
    "objectID": "posts/week 11/index.html#arrange",
    "href": "posts/week 11/index.html#arrange",
    "title": "week 11",
    "section": "arrange",
    "text": "arrange\n\n# arranging the table \n# first by product in alphabetical order\n# then by \"region\" in reverse alphabetical order\nbudget %>%\n  arrange(product, desc(region))\n\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 West   gadgets       1204        426           433        -136 low     low    \n2 South  gadgets       2022       -945          -610         200 low     low    \n3 North  gadgets        723         77          1037        1115 very h… very h…\n4 East   gadgets       -423       -354            94        2036 neutral high   \n5 West   widgets        633        790           783        -315 neutral neutral\n6 South  widgets       1123      -1450          1004         672 high    neutral\n7 North  widgets       2129       -517           822        -897 high    very h…\n8 East   widgets       -728        -51          -801        -342 very l… very l…\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020\n\nbudget %>%\n  arrange(product, region)\n\n# A tibble: 8 × 8\n  region product sales_2019 sales_2020 expenses_2019 expenses_…¹ satis…² satis…³\n  <chr>  <chr>        <dbl>      <dbl>         <dbl>       <dbl> <chr>   <chr>  \n1 East   gadgets       -423       -354            94        2036 neutral high   \n2 North  gadgets        723         77          1037        1115 very h… very h…\n3 South  gadgets       2022       -945          -610         200 low     low    \n4 West   gadgets       1204        426           433        -136 low     low    \n5 East   widgets       -728        -51          -801        -342 very l… very l…\n6 North  widgets       2129       -517           822        -897 high    very h…\n7 South  widgets       1123      -1450          1004         672 high    neutral\n8 West   widgets        633        790           783        -315 neutral neutral\n# … with abbreviated variable names ¹​expenses_2020, ²​satisfaction_2019,\n#   ³​satisfaction_2020"
  },
  {
    "objectID": "posts/week 11/index.html#mutate",
    "href": "posts/week 11/index.html#mutate",
    "title": "week 11",
    "section": "mutate",
    "text": "mutate\n\nbudget2 <- budget %>%\n  mutate(\n    sales = sales_2019 + sales_2020,\n    expenses = expenses_2019 + expenses_2020,\n    profit = sales - expenses,\n    region = paste(region, \"Office\")\n  )\nbudget3 <- budget %>%\n  mutate(\n    A = 1,\n    B = 1:8,\n    C = mean(1:8),\n    D = c(1,2,1,2,1,2,1,2),\n    E = rep(1:2,4)\n  )\n\nMutate with logic operators\n\nbudget2 <- budget2 %>%\n  mutate(profit_category = profit > 0,\n         product = as.factor(product))\n\nUsing case_when\n\nbudget3 <- budget2 %>%\n  mutate(profit_category = case_when(profit > 0 ~ \"PROFIT\",\n                                     profit < 0 ~ \"NO PROFIT\"))\n\n\n# create a column where people get a bonus if customer satisfaction was overall high or very high\nbonus <- budget3 %>%\n  mutate(bonus_2019 = case_when(\n    satisfaction_2019 %in% c(\"very low\", \"low\", \"neutral\") ~ \"no bonus\",\n    satisfaction_2019 %in% c(\"high\", \"very high\") ~ \"bonus\")\n    )\n\n\n# new management takes over - people only get a bonus if customer satisfaction was overall high or very high AND if a profit was returned\nbonus2 <- budget3 %>%\n  mutate(bonus_2020 = case_when(satisfaction_2020 == \"high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                satisfaction_2020 == \"very high\" & \n                                  profit_category == \"PROFIT\" ~ \"bonus\",\n                                TRUE ~ \"No bonus\")) # set all other values to \"no bonus\""
  },
  {
    "objectID": "posts/week 11/index.html#summarise",
    "href": "posts/week 11/index.html#summarise",
    "title": "week 11",
    "section": "summarise",
    "text": "summarise\n\nbudget4 <- budget %>%\n  select(-satisfaction_2019, -satisfaction_2020) %>%\n  pivot_longer(cols = sales_2019:expenses_2020,\n               names_to = c(\"type\", \"year\"),\n               names_sep = \"_\",\n               values_to = \"value\") %>%\n  pivot_wider(names_from = type,\n              values_from = value)\nhead(budget4) # check the format\n\n# A tibble: 6 × 5\n  region product year  sales expenses\n  <chr>  <chr>   <chr> <dbl>    <dbl>\n1 North  widgets 2019   2129      822\n2 North  widgets 2020   -517     -897\n3 North  gadgets 2019    723     1037\n4 North  gadgets 2020     77     1115\n5 South  widgets 2019   1123     1004\n6 South  widgets 2020  -1450      672\n\n\n\nbudget4 %>%\n  summarise(\n    mean_sales = mean(sales),\n    mean_expenses = mean(expenses),\n    min_profit = min(expenses - sales),\n    max_profit = max(expenses - sales)\n  )\n\n# A tibble: 1 × 4\n  mean_sales mean_expenses min_profit max_profit\n       <dbl>         <dbl>      <dbl>      <dbl>\n1       291.          318.      -2632       2390"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "quartoCourseBlog",
    "section": "",
    "text": "This is a template for using quarto to create a course blog. A course blog can be used in many ways to engage with course content. For example, you could use the blog to post assignments, or to dive more deeply into course material that interests you. By the end of the course, your blog can serve as a portfolio of ways that you engaged in the material. By learning how to use quarto for your blog, you will also be learning new skills for creating and sharing reproducible documents that could be useful to you in the future.\nThe purpose of this page is to provide tips and pointers about blogging with quarto. Quarto is simple enough for creating a basic course blog. However, it is also very deep and can be used to create all sorts of documents, from website, to slide decks, and books.\n\n\nMany questions about quarto can be answered from the quarto documentation located at: https://quarto.org.\nIf you are looking for something specific and don’t know where to find it on the website, use the search tool in the top right corner.\n\n\n\n\nTo use this template you will need a Github.com account, and access to R and Rstudio.\nYou can get access by creating a Github.com account, and downloading the necessary open-source software to your machine.\nIt is also possible to use Rstudio in your web-browser, which does not require downloading any software. There are two sets of instructions, one for the downloading approach, and the other for using Rstudio cloud. Scroll to the bottom for instructions on using Rstudio cloud.\n\n\n\nIn order to use this template you will need to install some free open-source software on your computer.\n\nSign up for a free account at https://github.com. This a website for sharing open-source software, but it can also be used to serve your blog as a website for free.\nDownload Github Desktop and install it on your machine. This should install the version control software git on your system, and you can use Github Desktop to easily push your blog from your local computer so that it can be viewed on Github.com.\nDownload R and install it on your machine. R is a programming language capable of many things, and it needs to be on your machine before you can run R Studio.\nDownload R Studio Desktop and install it on your machine. R Studio is called an “IDE” or integrated development environment, that you can use to write your blog with quarto.\n\n\n\n\nOnce you have the software installed, the next step is to create a quarto blog project in R studio. The collection of files in this template is a pre-made quarto blog project that you can modify for your own purposes. You can also make one yourself in Rstudio.\nAssuming you have downloaded this template, and you have installed the above software, then you need to open quartoCourseBlog.Rproj.\n\n\n\n\nTo find out if everything is working, try rendering the blog. Go to the “Build” Tab and press “Render Website”.\n\nAfter the rendering is complete, you should be able to view your blog. It might show up in the viewer pane like this:\n\nAnd if you press the ‘window-with-an-arrow’ button, you can view the website in your default browser. Quarto websites automatically adjust for the size of the window, so it may appear differently in the viewer pane versus the browser.\n\n\n\nAll of the blog posts are located in the posts folder.\n\nTo make a new post, copy an existing post and then modify it. For example, my posts folder currently contains one post, and it is inside the my_first_post folder.\n\nI can copy the folder and make a new one with the same contents from the Rstudio gear-box menu:\n\nI made a folder for a second post called Example_assignment.\n\nThese are the two files inside the folder. The .qmd file is a plain text file where you will write the blog post. This folder can also be used to store other assets you might put in the post, such as pictures.\n\n\n\nTo write a new post, open the .qmd file, edit the text, and then re-render the website. This is what the text in the .qmd file looked like when I copied it.\n\nThe text at the top between the “---” is called YAML, and provides meta-data for your document. This is where you can change the title, date, name, and add keywords if you want.\nThe rest of the document is for the main body of the post. For example, I changed the text to read:\n\n\n\n\n\nRender the website from the build tab again to see your new post.\n\n\n\nTo share your blog online you will have to publish it on a server that can be accessed by other people on the internet. There are multiple ways to do this step, and I recommend using Github pages. You can view more in-depth instructions from quarto here https://quarto.org/docs/publishing/github-pages.html.\nHere are the steps:\n\nOpen Github Desktop\nGo to preferences and sign in to your Github.com account\n“Add” your blog project folder to Github Desktop\nThere should be an option for a commit message, write a note in there like “first commit”.\nPublish to github.com and uncheck private repository so that other people will be able to see your repository.\nYou should now be able to see your new repository in your github.com profile, which means you should be able to see a copy of your blog files in the repository.\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder.\nAccess the blog from the url generated by the github pages settings page.\n\n\n\n\nWhenever you make changes to your blog project that you want to share online follow these steps:\n\nMake changes to your blog, like writing a new post, or editing an old one.\nRender the website in R-studio. What you see here should be what you will see later on Github.com\nOpen Github Desktop and Commit your changes, by writing brief commit title, and pressing commit.\nThen, use Github Desktop to Push your changes to github.com.\nWait half a minute or so, and you should see your new content appear on the website.\n\n\n\n\nI am planning to add a video overview of these steps soon. In the meantime, these instructions may be enough to get started with R studio cloud and github.com.\n\nSign up for a free account with posit cloud here https://posit.cloud/plans/free\nSign up for a free https://github.com account.\nLog in to Github, and search for this repository https://github.com/CrumpLab/quartoCourseBlog.\n\n\nClick the green “Use this template” Button\nThis will make a copy of the template in your github account, it will show up as one of your repositories\nGive your new repository a name\n\n\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder. You should now be able to view the blog from the url given by github pages.\nLog into Posit Cloud\nCreate a New Project, choose “New Project from Git Repository”\n\n\nenter the URL to the github repository you just made\n\n\nLoad the project, and edit/modify the files (see above for examples of creating new posts etc.)\nTo send your changed files back to github.com you need to do a few steps\n\n\nFrom the Git tab: stage your changes, commit your changes, and push your changes using the green up arrow.\nYou will also need to authenticate your git credentials, and allow Rstudio cloud to update your github repository\nIn the terminal run these two lines, but replace with your name and email\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n\nWhen you “push” your changes back to Github using the green up arrow, you will be asked to enter a username and password. You can enter the username for your Github.com account, but your password won’t work. You need to set up a personal access token.\nGo to your github.com profile > settings page. Scroll down, click on “<> Developer Settings”, on the left\nClick on personal access tokens, generate a new token, give it repo access. Save the text somewhere and use it as your github password when pushing from RStudio.\n\n\nAt this point you should be able to work on your blog in Rstudio Cloud, and push your changes to have them updated on github.com, which serves your blog online.\n\n\n\n\nSee this growing list of quarto resources for much, much more:\nhttps://github.com/mcanouil/awesome-quarto"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quartoCourseBlog",
    "section": "",
    "text": "week 3\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\ncoding tips\n\n\n\n\n\n\n\n\n\n\n\n\nRachel Babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nmidterm part 2\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\ntidy tuesday 2\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\ntidy tuesday 3\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nweek 10\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nweek 6\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nweek 4\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nweek 5\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nweek 12\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nweek 8\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nweek 7\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nmidterm part 1\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nweek6b\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nweek 9\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nweek 11\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\ntidy tuesday 1: London Marathon\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTest\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nMatt Crump\n\n\n\n\n\n\n  \n\n\n\n\nExample assignment\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nMatt Crump\n\n\n\n\n\n\n  \n\n\n\n\nMy First post\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nMatt Crump\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/tidy Tuesday  1/index.html",
    "href": "posts/tidy Tuesday  1/index.html",
    "title": "tidy tuesday 1: London Marathon",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\n# read in data\nlondon_marathon <- read_csv(\"data/london_marathon.csv\")\n\nRows: 42 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): Official charity\ndbl  (6): Year, Applicants, Accepted, Starters, Finishers, Raised\ndate (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nwinners <- read_csv(\"data/winners.csv\")\n\nRows: 165 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): Category, Athlete, Nationality\ndbl  (1): Year\ntime (1): Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# london marathon plot\nlondon_plot <- london_marathon %>%\n  filter(Year < 2020) %>%\n  mutate(Year = factor(Year))\n\nggplot(\n  data = london_plot,\n  mapping = aes(y = Year)\n) +\n  geom_point(aes(x = Starters),\n    colour = \"#008080\"\n  ) +\n  geom_point(aes(x = Finishers),\n    colour = \"#800080\"\n  ) +\n  geom_segment(aes(\n    x = Starters,\n    xend = Finishers,\n    y = Year,\n    yend = Year\n  )) +\n  labs(\n    x = \"Number of runners\",\n    title = \"Number of London Marathon Starters and Finishers\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill = \"white\", colour = \"white\"),\n    panel.background = element_rect(fill = \"white\", colour = \"white\")\n  )\n\n\n\nggsave(filename = \"london_marathon.png\", height = 7, width = 5)\n\n# winners plot\nwinners_plot <- winners %>%\n  group_by(Nationality) %>%\n  summarise(n = n())\n\nggplot(\n  data = winners_plot,\n  mapping = aes(\n    y = reorder(Nationality, n),\n    x = n\n  )\n) +\n  geom_col(fill = \"#e00601\") +\n  geom_text(aes(label = n),\n    colour = \"#e00601\",\n    hjust = -1\n  ) +\n  labs(\n    x = \"Number of winners\",\n    title = \"Nationality of London Marathon Winners\"\n  ) +\n  scale_x_continuous(limits = c(0, 50)) +\n  coord_cartesian(expand = FALSE) +\n  theme_minimal() +\n  theme(\n    axis.title.y = element_blank(),\n    plot.background = element_rect(fill = \"white\", colour = \"white\"),\n    panel.background = element_rect(fill = \"white\", colour = \"white\")\n  )\n\n\n\nggsave(filename = \"winners.png\", height = 7, width = 5)\n\n\n#create scatterplot\nggplot(data = london_marathon, \n                mapping = aes(x = Accepted, \n                              y = Year\n                              )) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Accepted\",\n       y = \"Year\",\n       title = \"Accepted by Year\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "posts/week 10/index.html",
    "href": "posts/week 10/index.html",
    "title": "week 10",
    "section": "",
    "text": "untidy_data <- read_csv(\"data/untidy_data.csv\", show_col_types = FALSE)\nknitr::kable(untidy_data)\n\n\n\n\n\n\n\n\n\n\n\n\n\ncustomer_id\nitemsprice_2018\nitemsprice_2019\nitemsprice_2020\ntotalprice_2018\ntotalprice_2019\ntotalprice_2020\n\n\n\n\n1\n2 (3.91)\n8 (4.72)\n10 (5.59)\n7.82\n37.76\n55.90\n\n\n2\n1 (3.91)\n6 (4.72)\n1 (5.59)\n3.91\n28.32\n5.59\n\n\n3\n4 (3.91)\n5 (4.72)\n5 (5.59)\n15.64\n23.60\n27.95\n\n\n4\n10 (3.91)\n1 (4.72)\n3 (5.59)\n39.10\n4.72\n16.77\n\n\n5\n3 (3.91)\n9 (4.72)\n8 (5.59)\n11.73\n42.48\n44.72"
  },
  {
    "objectID": "posts/week 10/index.html#look-at-tidy-data",
    "href": "posts/week 10/index.html#look-at-tidy-data",
    "title": "week 10",
    "section": "look at tidy data",
    "text": "look at tidy data\n\ntidy_data <- read_csv(\"data/tidy_data.csv\", show_col_types = FALSE)\nknitr::kable(tidy_data)\n\n\n\n\ncustomer_id\nyear\nitems\nprice_per_item\ntotalprice\n\n\n\n\n1\n2018\n2\n3.91\n7.82\n\n\n1\n2019\n8\n4.72\n37.76\n\n\n1\n2020\n10\n5.59\n55.90\n\n\n2\n2018\n1\n3.91\n3.91\n\n\n2\n2019\n6\n4.72\n28.32\n\n\n2\n2020\n1\n5.59\n5.59\n\n\n3\n2018\n4\n3.91\n15.64\n\n\n3\n2019\n5\n4.72\n23.60\n\n\n3\n2020\n5\n5.59\n27.95\n\n\n4\n2018\n10\n3.91\n39.10\n\n\n4\n2019\n1\n4.72\n4.72\n\n\n4\n2020\n3\n5.59\n16.77\n\n\n5\n2018\n3\n3.91\n11.73\n\n\n5\n2019\n9\n4.72\n42.48\n\n\n5\n2020\n8\n5.59\n44.72"
  },
  {
    "objectID": "posts/week 10/index.html#selecting-columns",
    "href": "posts/week 10/index.html#selecting-columns",
    "title": "week 10",
    "section": "selecting columns",
    "text": "selecting columns\n\n# select just the customer ID and 3 total price columns\nwide_totalprice <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)\n# wide_totalprice <- select(\n#   .data = untidy_data,\n#   customer_id, \n#   totalprice_2018,\n#   totalprice_2019,\n#   totalprice_2020\n# ) %>%\n#   rename(\n#   `2018` = totalprice_2018,\n#   `2019` = totalprice_2019,\n#   `2020` = totalprice_2020\n#   )\n# \n# \n# wide_totalprice <- untidy_data[,]\nuntidy_data[ , c(1,5,6,7) ]\n\n# A tibble: 5 × 4\n  customer_id totalprice_2018 totalprice_2019 totalprice_2020\n        <dbl>           <dbl>           <dbl>           <dbl>\n1           1            7.82           37.8            55.9 \n2           2            3.91           28.3             5.59\n3           3           15.6            23.6            28.0 \n4           4           39.1             4.72           16.8 \n5           5           11.7            42.5            44.7 \n\nuntidy_data[ , c(1,5:7) ]\n\n# A tibble: 5 × 4\n  customer_id totalprice_2018 totalprice_2019 totalprice_2020\n        <dbl>           <dbl>           <dbl>           <dbl>\n1           1            7.82           37.8            55.9 \n2           2            3.91           28.3             5.59\n3           3           15.6            23.6            28.0 \n4           4           39.1             4.72           16.8 \n5           5           11.7            42.5            44.7"
  },
  {
    "objectID": "posts/week 10/index.html#pivot-the-table-longer",
    "href": "posts/week 10/index.html#pivot-the-table-longer",
    "title": "week 10",
    "section": "pivot the table longer",
    "text": "pivot the table longer\n\nlong_totalprice <- pivot_longer(\n  data = wide_totalprice,\n  cols = 2:4,\n  names_to = \"year\",\n  values_to = \"totalprice\")\n\n\nggplot(long_totalprice, aes(x = totalprice, fill = year)) +\n  geom_histogram(binwidth = 10, color = \"black\")"
  },
  {
    "objectID": "posts/week 10/index.html#pivot-wider",
    "href": "posts/week 10/index.html#pivot-wider",
    "title": "week 10",
    "section": "pivot wider",
    "text": "pivot wider\n\nwide_by_customer <- pivot_wider(\n  data = long_totalprice,\n  id_cols = year, # identifying column(s)\n  names_from = customer_id, # the new column names\n  names_prefix = \"C_\", # prefix for new column names\n  values_from = totalprice # the new column values\n)\nwide_by_year <- pivot_wider(\n  data = long_totalprice,\n  id_cols = customer_id, # identifying column(s)\n  names_from = year, # the new column names\n  values_from = totalprice # the new column values\n)"
  },
  {
    "objectID": "posts/week 10/index.html#multi-step-tidying",
    "href": "posts/week 10/index.html#multi-step-tidying",
    "title": "week 10",
    "section": "multi-step tidying",
    "text": "multi-step tidying\n\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"), # new column names for cols\n  names_sep = \"_\", # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", # regex \n    replacement = \"\"\n  )\n)\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)\n\n# check the data types\nglimpse(tidy_data)\n\nRows: 15\nColumns: 5\n$ customer_id    <dbl> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n$ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n$ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n$ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n$ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…"
  },
  {
    "objectID": "posts/week 10/index.html#convert-messy-to-tidy",
    "href": "posts/week 10/index.html#convert-messy-to-tidy",
    "title": "week 10",
    "section": "convert messy to tidy",
    "text": "convert messy to tidy\n\ntidy_data_2 <- read_csv(file = \"data/untidy_data.csv\",\n                      show_col_types = FALSE) %>%\n  pivot_longer(\n    cols = itemsprice_2018:totalprice_2020,\n    names_to = c(\"category\", \"year\"),\n    names_sep = \"_\", \n    values_to = \"value\", \n    names_transform = list(year = as.integer),\n    values_transform = list(value = as.character) \n  ) %>%\n  pivot_wider(\n    id_cols = c(customer_id, year),\n    names_from = category,\n    values_from = value\n  ) %>%\n  separate(\n    col = itemsprice,\n    into = c(\"items\", \"price_per_item\"),\n    sep = \" \", \n    remove = TRUE, \n    convert = TRUE\n  ) %>%\n  mutate(\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item, \n      pattern = \"[()]\", \n      replacement = \"\"\n    )\n  ) %>%\n  type_convert(\n    trim_ws = TRUE\n  )\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  price_per_item = col_double(),\n  totalprice = col_double()\n)"
  },
  {
    "objectID": "posts/tidy tuesday 3/index.html",
    "href": "posts/tidy tuesday 3/index.html",
    "title": "tidy tuesday 3",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\ninstall.packages(\"tidytuesdayR\")\n\nInstalling package into '/cloud/lib/x86_64-pc-linux-gnu-library/4.2'\n(as 'lib' is unspecified)\n\ntuesdata <- tidytuesdayR::tt_load('2023-01-24')\n\n--- Compiling #TidyTuesday Information for 2023-01-24 ----\n--- There are 4 files available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 4: `survivalists.csv`\n    Downloading file 2 of 4: `loadouts.csv`\n    Downloading file 3 of 4: `episodes.csv`\n    Downloading file 4 of 4: `seasons.csv`\n\n\n--- Download complete ---\n\ntuesdata <- tidytuesdayR::tt_load(2023, week = 4)\n\n--- Compiling #TidyTuesday Information for 2023-01-24 ----\n--- There are 4 files available ---\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 4: `survivalists.csv`\n    Downloading file 2 of 4: `loadouts.csv`\n    Downloading file 3 of 4: `episodes.csv`\n    Downloading file 4 of 4: `seasons.csv`\n\n\n--- Download complete ---\n\nalone <- tuesdata$alone\n\nsurvivalists <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/survivalists.csv')\n\nRows: 94 Columns: 16\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): name, gender, city, state, country, reason_tapped_out, reason_cate...\ndbl  (5): season, age, result, days_lasted, day_linked_up\nlgl  (1): medically_evacuated\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nloadouts <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/loadouts.csv')\n\nRows: 940 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): version, name, item_detailed, item\ndbl (2): season, item_number\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nepisodes <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/episodes.csv')\n\nRows: 98 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): version, title, quote, author\ndbl  (6): season, episode_number_overall, episode, viewers, imdb_rating, n_r...\ndate (1): air_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nseasons <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-01-24/seasons.csv')\n\nRows: 9 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): version, location, country\ndbl  (4): season, n_survivors, lat, lon\ndate (1): date_drop_off\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nlibrary(tidyverse)\n \ndf <- expand_grid(\n  days_lasted = 0:max(survivalists$days_lasted),\n  gender = unique(survivalists$gender)\n) |> \n  left_join(\n    survivalists |> \n      count(days_lasted, gender),\n    by = c(\"days_lasted\", \"gender\")\n  ) |> \n  left_join(\n    survivalists |> \n      count(gender, name = \"N\"),\n    by = \"gender\"\n  ) |> \n  group_by(gender) |> \n  mutate(\n    n = replace_na(n, 0),\n    n_lasted = N-cumsum(n),\n    p = n_lasted/N\n  ) \n \n# Kaplan-Meier survival curves\n# code is simplified and plot won't match below\ndf |> \n  ggplot(aes(days_lasted, p, colour = gender)) +\n  geom_line() \n\n\n\n\n\nlibrary(forcats)\n \nloadouts |>\n  count(item) |>\n  mutate(item = fct_reorder(item, n, max)) |>\n  ggplot(aes(item, n)) +\n  geom_col() +\n  geom_text(aes(item, n + 3, label = n), size = 3) +\n  coord_flip()\n\n\n\n\n\n#create scatterplot\nggplot(data = episodes, \n                mapping = aes(x = season, \n                              y = episode_number_overall\n                              )) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"season\",\n       y = \"episode number overall\",\n       title = \"season by episode number overall\")"
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html",
    "href": "posts/tidy tuesday 2/index.html",
    "title": "tidy tuesday 2",
    "section": "",
    "text": "plots <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/plots.csv')\n\nRows: 8 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): treatment\ndbl (1): plot\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspecies <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/species.csv')\n\nRows: 21 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): species, scientificname, taxa, commonname\ndbl (11): censustarget, unidentified, rodent, granivore, minhfl, meanhfl, ma...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nsurveys <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-02/surveys.csv')\n\nRows: 28364 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (14): treatment, species, sex, reprod, age, testes, vagina, pregnant, n...\ndbl   (7): month, day, year, plot, stake, hfl, wgt\ndate  (1): censusdate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html#load-libraries",
    "href": "posts/tidy tuesday 2/index.html#load-libraries",
    "title": "tidy tuesday 2",
    "section": "load libraries",
    "text": "load libraries\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors"
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html#load-data-using-the-tidytuesdayr-package",
    "href": "posts/tidy tuesday 2/index.html#load-data-using-the-tidytuesdayr-package",
    "title": "tidy tuesday 2",
    "section": "load data using the tidytuesdayR package",
    "text": "load data using the tidytuesdayR package\n\ntuesdata <- tidytuesdayR::tt_load('2023-05-02')\n\n--- Compiling #TidyTuesday Information for 2023-05-02 ----\n\n\n--- There are 3 files available ---\n\n\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 3: `plots.csv`\n    Downloading file 2 of 3: `species.csv`\n    Downloading file 3 of 3: `surveys.csv`\n\n\n--- Download complete ---\n\nplots <- tuesdata$plots\nspecies <- tuesdata$species\nsurveys <- tuesdata$surveys"
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html#mice-per-year",
    "href": "posts/tidy tuesday 2/index.html#mice-per-year",
    "title": "tidy tuesday 2",
    "section": "mice per year",
    "text": "mice per year\n\nmice_count_by_year <- surveys %>%\n  group_by(year) %>%\n  count()\n\nggplot(mice_count_by_year, aes(x= year, y=n))+\n  geom_line() +\n  geom_point()+\n  ggtitle(\"Mice count by year\")+\n  scale_x_continuous(breaks=seq(1980,2020,5))"
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html#mice-per-year-by-sex",
    "href": "posts/tidy tuesday 2/index.html#mice-per-year-by-sex",
    "title": "tidy tuesday 2",
    "section": "mice per year by sex",
    "text": "mice per year by sex\n\nmice_count_by_year_sex <- surveys %>%\n  group_by(year,sex) %>%\n  count()\n\nggplot(mice_count_by_year_sex, aes(x= year, y=n, color=sex))+\n  geom_line() +\n  ggtitle(\"Mice count by year and sex\")+\n  scale_x_continuous(breaks=seq(1980,2020,5))"
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html#mice-per-year-by-species",
    "href": "posts/tidy tuesday 2/index.html#mice-per-year-by-species",
    "title": "tidy tuesday 2",
    "section": "mice per year by species",
    "text": "mice per year by species\n\nmice_count_by_year_species <- surveys %>%\n  group_by(year,species) %>%\n  count()\n\nggplot(mice_count_by_year_species, aes(x= year, \n                                       y=n, \n                                       color=species,\n                                       shape= species))+\n  geom_line() +\n  geom_point() +\n  ggtitle(\"Mice count by year and species\")+\n  scale_x_continuous(breaks=seq(1980,2020,5))\n\nWarning: The shape palette can deal with a maximum of 6 discrete values because\nmore than 6 becomes difficult to discriminate; you have 20. Consider\nspecifying shapes manually if you must have them.\n\n\nWarning: Removed 321 rows containing missing values (`geom_point()`).\n\n\n\n\nggplot(mice_count_by_year_species, aes(x= year, \n                                       y=n, \n                                       color=species))+\n  geom_line() +\n  geom_point() +\n  ggtitle(\"Mice count by year and species\")+\n  scale_x_continuous(breaks=seq(1980,2020,5)) +\n  facet_wrap(~species)"
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html#pregnancy-by-month",
    "href": "posts/tidy tuesday 2/index.html#pregnancy-by-month",
    "title": "tidy tuesday 2",
    "section": "Pregnancy by month",
    "text": "Pregnancy by month\n\nmonthly_data <- surveys %>%\n  mutate(month_string = lubridate::month(censusdate,label= T)) %>%\n  group_by(month) %>%\n  count(pregnant) %>%\n  pivot_wider(names_from=pregnant, values_from = n) %>%\n  mutate(proportion_pregnant = P/(P+`NA`))\n\nggplot(monthly_data, aes(x=month, y=proportion_pregnant))+\n  geom_line()"
  },
  {
    "objectID": "posts/tidy tuesday 2/index.html#bob-ross",
    "href": "posts/tidy tuesday 2/index.html#bob-ross",
    "title": "tidy tuesday 2",
    "section": "bob ross",
    "text": "bob ross\n\ntuesdata <- tidytuesdayR::tt_load('2023-02-21')\n\n--- Compiling #TidyTuesday Information for 2023-02-21 ----\n\n\n--- There is 1 file available ---\n\n\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `bob_ross.csv`\n\n\nOnly 10 Github queries remaining until 2023-05-16 04:45:12 PM UTC.\n\n\n--- Download complete ---\n\n#tuesdata <- tidytuesdayR::tt_load(2023, week = 8)\n\nbob_ross <- tuesdata$bob_ross\n\n\nggplot(bob_ross, aes(x=num_colors))+\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  }
]