[
  {
    "objectID": "posts/third week/index.html",
    "href": "posts/third week/index.html",
    "title": "week 3",
    "section": "",
    "text": "make a new qmd\n\nBe able to make a new .qmd document\n\nyes. copy a folder, and use copied .qmd\n\nBe able to render a .qmd document\nyes…\n\n\n\nsource vs visual\n\nExplain the difference between the source editor view and visual editor view in Rstudio.\n\nsource view is plain text. visual view renders plain text and interpret as markdown text. shows text formatting instead of plain text.\nbold\n\nBe able to insert simple markdown plain text (headers, lists, paragraphs), and render the document.\n\nwrite some stuff asasas\nitalics bold\nsuperscriptpt2 / subscript2\nsomething3459834\nstrikethrough\nverbatim code\n\nunordered list\n\nsub-item 1\nsub-item 2\n\nsub-sub-item 1\n\n\n\n\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\\(E = mc^{2}\\)\n\nBe aware of resources to help you learn more about markdown options.\nBe able to insert an R code chunk, and show the output in the rendered document.\n\n\nmacro for quick insert\n\noption, compand, i\nwhat does this look like?\n\n1+1\n\n[1] 2\n\n\n\nRunning R code chunks in a qmd\n\n\npressing play\ncopy/paste into console\nhighlight then command-enter (mac)\nprecedence issues (first to last)\n\n\nBe aware of R code chunk options, and how to use eval, messages, error, warning, and echo.\n\n\n\n\n\nBe able to set code chunk options per chunk, and/or for the whole document. Understand rules for precedence (which options will apply if both are set.)\n\nYes. Use execute in top-level yml, chunk options have precedence over global options.\n\nWrite inline r code.\n\n2\n\na <- 54\nb <- 100\nc <- a+b\n\nThe value of c is 154.\n\nExplain how the rendering environment is different from the Rstudio environment.\n\n\nc <- a+b\nc\n\n[1] 154\n\n\n\nBe aware of more advanced quarto options for html documents, and try some of the options."
  },
  {
    "objectID": "posts/third/index.html",
    "href": "posts/third/index.html",
    "title": "Test",
    "section": "",
    "text": "test post"
  },
  {
    "objectID": "posts/coding tips/index.html",
    "href": "posts/coding tips/index.html",
    "title": "coding tips",
    "section": "",
    "text": "How to commit and push changes to github?\n\nMake some changes to your files\nRender your website in Rstudio\nCommit your changes in github desktop with a commit message\nPush to github.com"
  },
  {
    "objectID": "posts/coding tips/index.html#restarting-r",
    "href": "posts/coding tips/index.html#restarting-r",
    "title": "coding tips",
    "section": "restarting R",
    "text": "restarting R\nsession –> restart R\ncmd-shift-f10\ntype .rs.restartR() in the console. THIS DID NOT WORK PROPERLY, the environment workspace did clear using this method."
  },
  {
    "objectID": "posts/coding tips/index.html#changing-the-picture-for-a-post",
    "href": "posts/coding tips/index.html#changing-the-picture-for-a-post",
    "title": "coding tips",
    "section": "changing the picture for a post",
    "text": "changing the picture for a post\nquarto blogs will display a picture in the listing of posts\n\nput a picture file (e.g.,jpg,png,gif) inside the folder for the post.\nlink to the picture with image: parameter in the .qmd yaml at the top of the document\n\nthe yaml for this document looks like:\n\ntitle: “my tip sheet for week 2” author: “rachel babadzhanov” image: “images/cover.jpg” ___"
  },
  {
    "objectID": "posts/coding tips/index.html#install.packages-tidyverse",
    "href": "posts/coding tips/index.html#install.packages-tidyverse",
    "title": "coding tips",
    "section": "install.packages (“tidyverse”)",
    "text": "install.packages (“tidyverse”)\ninstalling packages into ‘C:/users/staff/Documents/R/win-library/4.1’ (as ‘lib’ is unspecified) trying URL ‘https://cran.rstudio.com/bin/windows/contrib/4.1/tidyverse_1.3.2.zip’\nthe main repository where packages reside is called CRAN"
  },
  {
    "objectID": "posts/coding tips/index.html#difference-between-installing-a-package-aznd-loading-a-package",
    "href": "posts/coding tips/index.html#difference-between-installing-a-package-aznd-loading-a-package",
    "title": "coding tips",
    "section": "difference between installing a package aznd loading a package",
    "text": "difference between installing a package aznd loading a package\n\ninstall.packages(). it will be available but not loaded every time you open up R.\n\n** never install a package from inside a scrip. only from console pane or the packages tab of the lower right pane.\nloading a package is done using the library() function. (aka. lauching an app)\nrun the function using beep()\nif a package isn’t loaded, use ?package_name::function_name"
  },
  {
    "objectID": "posts/coding tips/index.html#themes-and-accessibility",
    "href": "posts/coding tips/index.html#themes-and-accessibility",
    "title": "coding tips",
    "section": "themes and accessibility",
    "text": "themes and accessibility\nused to change the font, size, and general appearance of R studio\n\ngo to tools\nthen global options\nthen appearance\n\nmore tips to come"
  },
  {
    "objectID": "posts/UntitledQMD.html",
    "href": "posts/UntitledQMD.html",
    "title": "quartoCourseBlog",
    "section": "",
    "text": "install.packages(“rmarkdown”)"
  },
  {
    "objectID": "posts/week 6/index.html",
    "href": "posts/week 6/index.html",
    "title": "week 6",
    "section": "",
    "text": "tweets <- readRDS(\"ncod_tweets.rds\")"
  },
  {
    "objectID": "posts/week 6/index.html#summarise",
    "href": "posts/week 6/index.html#summarise",
    "title": "week 6",
    "section": "5.2 Summarise",
    "text": "5.2 Summarise\n\nlibrary(tidyverse) #loads dplyr as well\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nfavourite_summary <- summarise(tweets, # name of the data table\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count))\n\nknitr::kable(favourite_summary) #print output\n\n\n\n\nmean_favs\nmedian_favs\nmin_favs\nmax_favs\n\n\n\n\n29.71732\n3\n0\n22935\n\n\n\n\n\n\nfavourite_summary <- summarise(tweets,\n                           mean_favs = mean(favorite_count),\n                           median_favs = median(favorite_count),\n                           min_favs = min(favorite_count),\n                           max_favs = max(favorite_count),\n                           sd_favs = sd(favorite_count),\n                           mean_RTs = mean(retweet_count),\n                           median_RTs = median(retweet_count),\n                           min_RTs = min(retweet_count),\n                           max_RTs = max(retweet_count),\n                           sd_RTs = sd(favorite_count))\n\nknitr::kable(favourite_summary)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmean_favs\nmedian_favs\nmin_favs\nmax_favs\nsd_favs\nmean_RTs\nmedian_RTs\nmin_RTs\nmax_RTs\nsd_RTs\n\n\n\n\n29.71732\n3\n0\n22935\n329.9982\n3.166632\n0\n0\n2525\n329.9982\n\n\n\n\n\nExample of plotting a histogram of the favorite counts, in log scale.\n\nggplot(tweets, aes(x = favorite_count)) +\n  geom_histogram(bins = 25) +\n  scale_x_continuous(trans = \"pseudo_log\", \n                     breaks = c(0, 1, 10, 100, 1000, 10000))\n\n\n\n\nAnother example of adding individual functions to summarise.\n\ntweet_summary <- tweets %>%\n  summarise(mean_favs = mean(favorite_count),\n            median_favs = quantile(favorite_count, .5),\n            n = n(), # count all rows\n            min_date = min(created_at), # find the minimum date\n            max_date = max(created_at)) # find the maximum date\n\nglimpse(tweet_summary)\n\nRows: 1\nColumns: 5\n$ mean_favs   <dbl> 29.71732\n$ median_favs <dbl> 3\n$ n           <int> 28626\n$ min_date    <dttm> 2021-10-10 00:10:02\n$ max_date    <dttm> 2021-10-12 20:12:27\n\n\nExample of writing inline code.\n\ndate_from <- tweet_summary$min_date %>% \n  format(\"%d %B, %Y\")\ndate_to <- tweet_summary$max_date %>% \n  format(\"%d %B, %Y\")\n\nThere were 28626 tweets between 10 October, 2021 and 12 October, 2021."
  },
  {
    "objectID": "posts/week 6/index.html#pipes",
    "href": "posts/week 6/index.html#pipes",
    "title": "week 6",
    "section": "5.3.2 Pipes",
    "text": "5.3.2 Pipes\nExample of using the pipe operate syntax %>%.\n\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\n\nhead(tweets_per_user)\n\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23"
  },
  {
    "objectID": "posts/week 6/index.html#counting",
    "href": "posts/week 6/index.html#counting",
    "title": "week 6",
    "section": "5.4 Counting",
    "text": "5.4 Counting\n\ntweets_per_user <- tweets %>%\n  count(screen_name, sort = TRUE)\n\nhead(tweets_per_user)\n\n# A tibble: 6 × 2\n  screen_name         n\n  <chr>           <int>\n1 interest_outfit    35\n2 LeoShir2           33\n3 NRArchway          32\n4 dr_stack           32\n5 bhavna_95          25\n6 WipeHomophobia     23"
  },
  {
    "objectID": "posts/week 6/index.html#grouping",
    "href": "posts/week 6/index.html#grouping",
    "title": "week 6",
    "section": "5.5 Grouping",
    "text": "5.5 Grouping\nTwo ways to use the group_by function.\n\ntweets_grouped <- tweets %>%\n  group_by(verified)\n\nverified <- tweets_grouped %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\n\nknitr::kable(verified)\n\n\n\n\nverified\ncount\nmean_favs\nmean_retweets\n\n\n\n\nFALSE\n26676\n18.40576\n1.825649\n\n\nTRUE\n1950\n184.45949\n21.511282\n\n\n\n\n\n\nverified <- tweets %>%\n  group_by(verified) %>%\n  summarise(count = n(),\n            mean_favs = mean(favorite_count),\n            mean_retweets = mean(retweet_count)) %>%\n  ungroup()\n\nknitr::kable(verified)\n\n\n\n\nverified\ncount\nmean_favs\nmean_retweets\n\n\n\n\nFALSE\n26676\n18.40576\n1.825649\n\n\nTRUE\n1950\n184.45949\n21.511282"
  },
  {
    "objectID": "posts/Example_assignment/index.html",
    "href": "posts/Example_assignment/index.html",
    "title": "Example assignment",
    "section": "",
    "text": "This assignment engages you in the process of introspection. Your task is to use introspection to evaluate and describe your own mental imagery abilities. Attempt to answer the following kinds of questions. What is your mental imagery like? Do you have mental imagery for different kinds of senses? Is your mental imagery vivid and life-like or very different from normal perception? How would you describe your mental imagery?\nYou should write a minimum of 250 words, but feel free to write more. Submit your document on blackboard by the due date."
  },
  {
    "objectID": "posts/Example_assignment/index.html#my-mental-imagery",
    "href": "posts/Example_assignment/index.html#my-mental-imagery",
    "title": "Example assignment",
    "section": "My mental imagery",
    "text": "My mental imagery\nMy mental imagery is like…"
  },
  {
    "objectID": "posts/week 4/index.html",
    "href": "posts/week 4/index.html",
    "title": "week 4",
    "section": "",
    "text": "#loads ggplot2, and some example data sets\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nstarwars_copy <- starwars\n\n# check out some of the datatypes\nhead(starwars_copy)\n\n# A tibble: 6 × 14\n  name         height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender homew…⁵\n  <chr>         <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr>  <chr>  \n1 Luke Skywal…    172    77 blond   fair    blue       19   male  mascu… Tatooi…\n2 C-3PO           167    75 <NA>    gold    yellow    112   none  mascu… Tatooi…\n3 R2-D2            96    32 <NA>    white,… red        33   none  mascu… Naboo  \n4 Darth Vader     202   136 none    white   yellow     41.9 male  mascu… Tatooi…\n5 Leia Organa     150    49 brown   light   brown      19   fema… femin… Aldera…\n6 Owen Lars       178   120 brown,… light   blue       52   male  mascu… Tatooi…\n# … with 4 more variables: species <chr>, films <list>, vehicles <list>,\n#   starships <list>, and abbreviated variable names ¹​hair_color, ²​skin_color,\n#   ³​eye_color, ⁴​birth_year, ⁵​homeworld\n\nclass(starwars_copy$name)\n\n[1] \"character\"\n\nclass(starwars_copy$height)\n\n[1] \"integer\"\n\nclass(starwars_copy$mass)\n\n[1] \"numeric\"\n\nclass(starwars_copy$homeworld)\n\n[1] \"character\"\n\n# plot some variables\nggplot(data = starwars_copy,\n       mapping = aes(x=height,y=mass) )+\n  geom_point()\n\nWarning: Removed 28 rows containing missing values (`geom_point()`)."
  },
  {
    "objectID": "posts/week 4/index.html#data-types",
    "href": "posts/week 4/index.html#data-types",
    "title": "week 4",
    "section": "Data Types",
    "text": "Data Types\n\n# assign 1 to object named a\na <- 1\n1 -> b\nf <- 4 -> g\n\n\n# look at the data type of object in a\nclass(a)\n\n[1] \"numeric\"\n\ntypeof(a)\n\n[1] \"double\"\n\n\n\nintegers\n\n#integers (no decimals)\n# L specifies integer\ntypeof(1L) \n\n[1] \"integer\"\n\nclass(1L)\n\n[1] \"integer\"\n\nis.integer(1L)\n\n[1] TRUE\n\nas.integer(1.1) # coerces to integer\n\n[1] 1\n\nas.integer(1.5) # rounds down\n\n[1] 1\n\nas.integer(1.9) # rounds down\n\n[1] 1\n\ninteger(length = 5) #initialize a vector for integers\n\n[1] 0 0 0 0 0\n\nis.integer(as.integer(1:5))\n\n[1] TRUE\n\n\n\n\nnumeric/doubles\n\n# decimal numbers\n# numbers without decimals default to numeric\ntypeof(1) \n\n[1] \"double\"\n\nclass(1)\n\n[1] \"numeric\"\n\nis.numeric(1)\n\n[1] TRUE\n\nas.numeric(1L) # coerces integer to numeric\n\n[1] 1\n\nnumeric(length = 5) #initialize a vector for doubles\n\n[1] 0 0 0 0 0\n\n\n\n\nLogical/Boolean\nUppercase TRUE, or FALSE makes logical (binary) variables\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\nclass(TRUE)\n\n[1] \"logical\"\n\nis.logical(FALSE)\n\n[1] TRUE\n\nas.logical(1) # coerces 1 to TRUE\n\n[1] TRUE\n\nas.logical(0) # coerces 0  to FALSE\n\n[1] FALSE\n\nlogical(length = 5) # initialize a logical vector\n\n[1] FALSE FALSE FALSE FALSE FALSE\n\n\n\n\ndata.frame\nA table with rows and columns.\n\nmy_df <- data.frame(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n\n  a     b     random\n1 1   one 0.20792526\n2 2   two 0.44115041\n3 3 three 0.03034016\n4 4  four 0.28440697\n5 5  five 0.93514933\n\n# access columns with $\nmy_df$a == 1:5\n\n[1] TRUE TRUE TRUE TRUE TRUE\n\nmy_df$b\n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n\n  a   b    random\n1 1 one 0.2079253\n\nmy_df[,1] # column 1, all rows\n\n[1] 1 2 3 4 5\n\nmy_df[1:2,] # rows 1 to 2, all columns\n\n  a   b    random\n1 1 one 0.2079253\n2 2 two 0.4411504\n\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n\n[1] 0.2079253 0.4411504\n\n\n\n\nTibble\nA table with rows and columns.\n\nmy_df <- tibble(a = 1:5,\n                    b = c(\"one\",\"two\",\"three\",\"four\",\"five\"),\n                    random = runif(5,0,1))\n#print to see it\nmy_df\n\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n2     2 two    0.241\n3     3 three  0.194\n4     4 four   0.297\n5     5 five   0.551\n\n# access columns with $\nmy_df$a\n\n[1] 1 2 3 4 5\n\nmy_df$b\n\n[1] \"one\"   \"two\"   \"three\" \"four\"  \"five\" \n\n## access rows or columns with [row,column]\nmy_df[1,] # row 1, all columns\n\n# A tibble: 1 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n\nmy_df[,1] # column 1, all rows\n\n# A tibble: 5 × 1\n      a\n  <int>\n1     1\n2     2\n3     3\n4     4\n5     5\n\nmy_df[1:2,] # rows 1 to 2, all columns\n\n# A tibble: 2 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n2     2 two    0.241\n\nmy_df[1:2, 3] # rows 1 to 2, but only for column 3\n\n# A tibble: 2 × 1\n  random\n   <dbl>\n1  0.305\n2  0.241\n\nmy_df\n\n# A tibble: 5 × 3\n      a b     random\n  <int> <chr>  <dbl>\n1     1 one    0.305\n2     2 two    0.241\n3     3 three  0.194\n4     4 four   0.297\n5     5 five   0.551"
  },
  {
    "objectID": "posts/week 4/index.html#ggplot2",
    "href": "posts/week 4/index.html#ggplot2",
    "title": "week 4",
    "section": "ggplot2",
    "text": "ggplot2\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v2/data/survey_data.csv\")\n\nRows: 707 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (3): caller_id, employee_id, issue_category\ndbl  (3): wait_time, call_time, satisfaction\ndttm (1): call_start\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(survey_data)\n\n# A tibble: 6 × 7\n  caller_id employee_id call_start          wait_time call_time issue_…¹ satis…²\n  <chr>     <chr>       <dttm>                  <dbl>     <dbl> <chr>      <dbl>\n1 C001      E01         2020-09-22 10:47:54       169        34 tech           3\n2 C002      E01         2020-09-07 22:10:25       206        52 tech           2\n3 C003      E01         2020-07-06 12:08:59       207        41 tech           2\n4 C004      E01         2020-02-20 13:12:03       132        16 tech           4\n5 C005      E01         2020-11-08 17:42:10       178        20 returns        3\n6 C006      E01         2020-06-01 19:06:12       230        46 returns        2\n# … with abbreviated variable names ¹​issue_category, ²​satisfaction\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nggplot()\n\n\n\nggplot(data = survey_data,\n       mapping = aes(x = wait_time,\n                     y = satisfaction)\n       )\n\n\n\nggplot(survey_data, aes(x = wait_time, y = satisfaction))\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point()\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"red\")\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction)) + \n  geom_point(color=\"black\", size = 5) +\n   geom_point(color=\"#fa2fcb\", size = 4) +\n  geom_smooth(method =\"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nggplot(survey_data, \n       aes(x = wait_time, \n           y = satisfaction,\n           color = wait_time,\n           size = satisfaction)) + \n  geom_point()\n\n\n\nmin(survey_data$wait_time)\n\n[1] 23\n\nmax(survey_data$wait_time)\n\n[1] 314\n\nlength(survey_data$wait_time)\n\n[1] 707\n\nggplot(data=survey_data, mapping= aes(x=wait_time))+\n  geom_histogram(bins=50, color=\"red\") +\n  theme_classic()"
  },
  {
    "objectID": "posts/week 5/index.html",
    "href": "posts/week 5/index.html",
    "title": "week 5",
    "section": "",
    "text": "Load libraries\n\nlibrary(tidyverse)     # includes readr & tibble\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.0     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.1.8\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the \u001b]8;;http://conflicted.r-lib.org/\u0007conflicted package\u001b]8;;\u0007 to force all conflicts to become errors\n\nlibrary(rio)           # for almost any data import/export\nlibrary(haven)         # for SPSS, Stata,and SAS files\nlibrary(readxl)        # for Excel files\nlibrary(googlesheets4) # for Google Sheets\n\n\n\nOptions for viewing data\n\ndata(cars) # make data from R package available in global environment\n#View(cars) # view in editor pane\n#print(cars) # print to console\n#cars # print to console\n\n# show columns as rows\nglimpse(cars)\n\nRows: 50\nColumns: 2\n$ speed <dbl> 4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13…\n$ dist  <dbl> 2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34…\n\n#show first 10 lines of table\nhead(cars)\n\n  speed dist\n1     4    2\n2     4   10\n3     7    4\n4     7   22\n5     8   16\n6     9   10\n\n# print nicely to web\nknitr::kable(head(cars))\n\n\n\n\nspeed\ndist\n\n\n\n\n4\n2\n\n\n4\n10\n\n\n7\n4\n\n\n7\n22\n\n\n8\n16\n\n\n9\n10\n\n\n\n\n\n\n\nProduce summaries\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\nlibrary(summarytools)\n\nWarning in fun(libname, pkgname): couldn't connect to display \":0\"\n\n\nsystem might not have X11 capabilities; in case of errors when using dfSummary(), set st_options(use.x11 = FALSE)\n\n\n\nAttaching package: 'summarytools'\n\n\nThe following object is masked from 'package:tibble':\n\n    view\n\n#view(dfSummary(starwars))\n\n\n\nImporting data\n\nlibrary(rio)\n\ndemo_tsv <- import(file = \"demo.tsv\")\n\nglimpse(demo_tsv)\n\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <chr> \"high\", \"low\", \"med\", \"high\", \"low\", \"med\"\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <IDate> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n\ndemo_tsv$factor <- as.factor(demo_tsv$factor)\n\nglimpse(demo_tsv)\n\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <fct> high, low, med, high, low, med\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <IDate> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n\ndemo_tsv$\ndemo_tsv$factor\n\nNULL\n\n\n\ndemo_tsv  <- import(\"demo.tsv\")  # tab-separated values\ndemo_csv  <- import(\"demo.csv\")  # comma-separated values\ndemo_xls  <- import(\"demo.xlsx\") # Excel format\ndemo_sav  <- import(\"demo.sav\")  # SPSS format\n\n\ngs4_deauth() # skip authorisation for public data\n\ndemo_gs4  <- googlesheets4::read_sheet(\n  ss = \"16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\"\n)\n\n✔ Reading from \"demo\".\n\n\n✔ Range 'Sheet1'.\n\ngs4_get(ss = \"16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\")\n\nSpreadsheet name: demo\n              ID: 16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\n          Locale: en_US\n       Time zone: Europe/London\n     # of sheets: 1\n\n(Sheet name): (Nominal extent in rows x columns)\n      Sheet1: 1000 x 26\n\n\n\ndemo <- readr::read_csv(\"demo.csv\")\n\nRows: 6 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): character, factor\ndbl  (2): integer, double\nlgl  (1): logical\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nspec(demo)\n\ncols(\n  character = col_character(),\n  factor = col_character(),\n  integer = col_double(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"\")\n)\n\ncorrected_cols <- cols(\n  character = col_character(),\n  factor = col_factor(levels = c(\"low\", \"med\", \"high\")),\n  integer = col_integer(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"%Y-%m-%d\")\n)\n\ndemo <- readr::read_csv(\"demo.csv\", col_types = corrected_cols)\n\nglimpse(demo)\n\nRows: 6\nColumns: 6\n$ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n$ factor    <fct> high, low, med, high, low, med\n$ integer   <int> 1, 2, 3, 4, 5, 6\n$ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n$ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n$ date      <date> 2022-04-04, 2022-04-03, 2022-04-02, 2022-04-01, 2022-03-31, …\n\n\n\n\nWrite your own data\n\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE,\n  numbers = c(1,2,3),\n  more_numbers = 1:3,\n  even_more = seq(1,3,1)\n)\n\n# print it\navatar\n\n# A tibble: 3 × 6\n  name   bends friendly numbers more_numbers even_more\n  <chr>  <chr> <lgl>      <dbl>        <int>     <dbl>\n1 Katara water TRUE           1            1         1\n2 Toph   earth TRUE           2            2         2\n3 Sokka  <NA>  TRUE           3            3         3\n\n\n\navatar_by_row <- tribble(\n  ~name,    ~bends,  ~friendly, ~numbers,\n  \"Katara\", \"water\", TRUE, 1L,\n  \"Toph\",   \"earth\", TRUE, 2L,\n  \"Sokka\",  NA,      TRUE, 3L\n)\navatar_by_row\n\n# A tibble: 3 × 4\n  name   bends friendly numbers\n  <chr>  <chr> <lgl>      <int>\n1 Katara water TRUE           1\n2 Toph   earth TRUE           2\n3 Sokka  <NA>  TRUE           3\n\n\n\n\nExport data\n\nexport(avatar, \"avatar.csv\")"
  },
  {
    "objectID": "posts/my_first_post/index.html",
    "href": "posts/my_first_post/index.html",
    "title": "My First post",
    "section": "",
    "text": "This is an example first post. Whatever you write here will appear inside your post.\nIt is possible to write lists:\nAnd make headers"
  },
  {
    "objectID": "posts/my_first_post/index.html#this-is-a-second-level-heading",
    "href": "posts/my_first_post/index.html#this-is-a-second-level-heading",
    "title": "My First post",
    "section": "This is a second level heading",
    "text": "This is a second level heading\nYou can include images, and many other kinds of content.\nIf you are using the visual editor in Rstudio you can drag images onto the editor to insert them into the document. Otherwise, you need to place the image inside of the folder for this post, and then you can insert it to your post directly, like this:\n\nThe first image in a blog post will also be used on the listings page."
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "quartoCourseBlog",
    "section": "",
    "text": "This is a template for using quarto to create a course blog. A course blog can be used in many ways to engage with course content. For example, you could use the blog to post assignments, or to dive more deeply into course material that interests you. By the end of the course, your blog can serve as a portfolio of ways that you engaged in the material. By learning how to use quarto for your blog, you will also be learning new skills for creating and sharing reproducible documents that could be useful to you in the future.\nThe purpose of this page is to provide tips and pointers about blogging with quarto. Quarto is simple enough for creating a basic course blog. However, it is also very deep and can be used to create all sorts of documents, from website, to slide decks, and books.\n\n\nMany questions about quarto can be answered from the quarto documentation located at: https://quarto.org.\nIf you are looking for something specific and don’t know where to find it on the website, use the search tool in the top right corner.\n\n\n\n\nTo use this template you will need a Github.com account, and access to R and Rstudio.\nYou can get access by creating a Github.com account, and downloading the necessary open-source software to your machine.\nIt is also possible to use Rstudio in your web-browser, which does not require downloading any software. There are two sets of instructions, one for the downloading approach, and the other for using Rstudio cloud. Scroll to the bottom for instructions on using Rstudio cloud.\n\n\n\nIn order to use this template you will need to install some free open-source software on your computer.\n\nSign up for a free account at https://github.com. This a website for sharing open-source software, but it can also be used to serve your blog as a website for free.\nDownload Github Desktop and install it on your machine. This should install the version control software git on your system, and you can use Github Desktop to easily push your blog from your local computer so that it can be viewed on Github.com.\nDownload R and install it on your machine. R is a programming language capable of many things, and it needs to be on your machine before you can run R Studio.\nDownload R Studio Desktop and install it on your machine. R Studio is called an “IDE” or integrated development environment, that you can use to write your blog with quarto.\n\n\n\n\nOnce you have the software installed, the next step is to create a quarto blog project in R studio. The collection of files in this template is a pre-made quarto blog project that you can modify for your own purposes. You can also make one yourself in Rstudio.\nAssuming you have downloaded this template, and you have installed the above software, then you need to open quartoCourseBlog.Rproj.\n\n\n\n\nTo find out if everything is working, try rendering the blog. Go to the “Build” Tab and press “Render Website”.\n\nAfter the rendering is complete, you should be able to view your blog. It might show up in the viewer pane like this:\n\nAnd if you press the ‘window-with-an-arrow’ button, you can view the website in your default browser. Quarto websites automatically adjust for the size of the window, so it may appear differently in the viewer pane versus the browser.\n\n\n\nAll of the blog posts are located in the posts folder.\n\nTo make a new post, copy an existing post and then modify it. For example, my posts folder currently contains one post, and it is inside the my_first_post folder.\n\nI can copy the folder and make a new one with the same contents from the Rstudio gear-box menu:\n\nI made a folder for a second post called Example_assignment.\n\nThese are the two files inside the folder. The .qmd file is a plain text file where you will write the blog post. This folder can also be used to store other assets you might put in the post, such as pictures.\n\n\n\nTo write a new post, open the .qmd file, edit the text, and then re-render the website. This is what the text in the .qmd file looked like when I copied it.\n\nThe text at the top between the “---” is called YAML, and provides meta-data for your document. This is where you can change the title, date, name, and add keywords if you want.\nThe rest of the document is for the main body of the post. For example, I changed the text to read:\n\n\n\n\n\nRender the website from the build tab again to see your new post.\n\n\n\nTo share your blog online you will have to publish it on a server that can be accessed by other people on the internet. There are multiple ways to do this step, and I recommend using Github pages. You can view more in-depth instructions from quarto here https://quarto.org/docs/publishing/github-pages.html.\nHere are the steps:\n\nOpen Github Desktop\nGo to preferences and sign in to your Github.com account\n“Add” your blog project folder to Github Desktop\nThere should be an option for a commit message, write a note in there like “first commit”.\nPublish to github.com and uncheck private repository so that other people will be able to see your repository.\nYou should now be able to see your new repository in your github.com profile, which means you should be able to see a copy of your blog files in the repository.\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder.\nAccess the blog from the url generated by the github pages settings page.\n\n\n\n\nWhenever you make changes to your blog project that you want to share online follow these steps:\n\nMake changes to your blog, like writing a new post, or editing an old one.\nRender the website in R-studio. What you see here should be what you will see later on Github.com\nOpen Github Desktop and Commit your changes, by writing brief commit title, and pressing commit.\nThen, use Github Desktop to Push your changes to github.com.\nWait half a minute or so, and you should see your new content appear on the website.\n\n\n\n\nI am planning to add a video overview of these steps soon. In the meantime, these instructions may be enough to get started with R studio cloud and github.com.\n\nSign up for a free account with posit cloud here https://posit.cloud/plans/free\nSign up for a free https://github.com account.\nLog in to Github, and search for this repository https://github.com/CrumpLab/quartoCourseBlog.\n\n\nClick the green “Use this template” Button\nThis will make a copy of the template in your github account, it will show up as one of your repositories\nGive your new repository a name\n\n\nActivate Github pages for your repository (under repository settings), and serve the page from the “docs” folder. You should now be able to view the blog from the url given by github pages.\nLog into Posit Cloud\nCreate a New Project, choose “New Project from Git Repository”\n\n\nenter the URL to the github repository you just made\n\n\nLoad the project, and edit/modify the files (see above for examples of creating new posts etc.)\nTo send your changed files back to github.com you need to do a few steps\n\n\nFrom the Git tab: stage your changes, commit your changes, and push your changes using the green up arrow.\nYou will also need to authenticate your git credentials, and allow Rstudio cloud to update your github repository\nIn the terminal run these two lines, but replace with your name and email\n\n\ngit config --global user.name \"Your Name\"\ngit config --global user.email \"you@example.com\"\n\nWhen you “push” your changes back to Github using the green up arrow, you will be asked to enter a username and password. You can enter the username for your Github.com account, but your password won’t work. You need to set up a personal access token.\nGo to your github.com profile > settings page. Scroll down, click on “<> Developer Settings”, on the left\nClick on personal access tokens, generate a new token, give it repo access. Save the text somewhere and use it as your github password when pushing from RStudio.\n\n\nAt this point you should be able to work on your blog in Rstudio Cloud, and push your changes to have them updated on github.com, which serves your blog online.\n\n\n\n\nSee this growing list of quarto resources for much, much more:\nhttps://github.com/mcanouil/awesome-quarto"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "quartoCourseBlog",
    "section": "",
    "text": "week 3\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\ncoding tips\n\n\n\n\n\n\n\n\n\n\n\n\nRachel Babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nweek 6\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nweek 4\n\n\n\n\n\n\n\n\n\n\n\n\nrachel babadzhanov\n\n\n\n\n\n\n  \n\n\n\n\nweek 5\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nweek6b\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nTest\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nMatt Crump\n\n\n\n\n\n\n  \n\n\n\n\nExample assignment\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nMatt Crump\n\n\n\n\n\n\n  \n\n\n\n\nMy First post\n\n\n\n\n\n\n\ngoals\n\n\ngeneral\n\n\n\n\n\n\n\n\n\n\n\nOct 21, 2022\n\n\nMatt Crump\n\n\n\n\n\n\nNo matching items"
  }
]