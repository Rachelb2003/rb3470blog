---
title: "midterm part 1"
author: "rachel babadzhanov"
---

# R Object

```{r}

my_string <- "Hello, world!"

my_num <- 42.5

my_int <- 42L

my_logical <- TRUE

my_data_frame <- data.frame(name = c("John", "Jane", "Bob"), age = c(25, 30, 35))


my_list <- list(name = "John", age = 25, favorite_foods = c("pizza", "tacos", "sushi"))


my_string[2]

my_num[1] <- 50

```

#logical operations

```{r}

2 == 2

2 > 1 & 3 > 2

2 > 1 | 3 < 2



```

# loops

```{r}

for (i in 1:5) {
  print(i)
}

```

### equal to ==

```{r}
1 == 1 # is 1 equal to 1?
1 == 2 # is 1 equal to 2?
c(1, 2, 3) == c(2, 1, 3) # compares each element with each element
1 == c(2, 1, 3)
```

### not equal to !=

```{r}
1 != 1 # is 1 not equal to 1?
1 != 2 # is 1 not equal to 2?
c(1, 2, 3) != c(2, 1, 3) # compares each element with each element
1 != c(2, 1, 3)
```

### Greater than/ less than

```{r}
1 > 1 # is 1 greater than 1?
5 > 1 # is 5 greater than 1?
3 < 2 # is 3 less than 2?
3 < 1 # is 3 less than 1?
c(1, 2, 3) > c(2, 1, 3) # ask the question element by element
c(1, 2, 3) < c(2, 1, 3)
2 > c(1, 2, 3) # is greater than each of the numbers
```

### \>= \<=

Is something greater than or equal to something else

```{r}
1 >= 1 # is 1 greater than or equal to 1?
5 >= 1 # is 5 greater than or equal to 1?
3 <= 2 # is 3 less than 2?
3 <= 1 # is 3 less than 1?
c(1, 2, 3) >= c(2, 1, 3) # ask the question element by element
c(1, 2, 3) <= c(2, 1, 3)
2 >= c(1, 2, 3) # is greater than each of the numbers
```

### AND

The ampersand `&` is used for AND, which allows use to evaluate whether two or more properties are all TRUE.

```{r}
# is 16 divisible by 4 AND 8
16 %% 4 == 0 & 16 %% 8 == 0
# is 16 divisible by 4 AND 3
16 %% 4 == 0 & 16 %% 3 == 0
# is 16 divisible by 8 and 4 and 2
16 %% 4 == 0 & 16 %% 8 == 0 & 16 %% 2 == 0
16 %% 4 == 0
16 %% 8 == 0
16 %% 2 == 0
```

### OR

The `|` is used for OR, which allows use to evaluate at least one of the properties is TRUE.

```{r}
# is 16 divisible by 4 OR 8
16 %% 4 == 0 | 16 %% 8 == 0
# is 16 divisible by 4 OR 3
# it is divisible by 4, so the answer is TRUE
# because at least one of the comparisons is TRUE
16 %% 4 == 0 | 16 %% 3 == 0
TRUE | FALSE
```

### TRUE FALSE

When R returns values as TRUE or FALSE, it return a logical variable. It also treats TRUE as a 1, and FALSE as a 0. In the example below we see it is possible sum up a logical variable with multiple TRUE and FALSE entries.

```{r}
c(1, 2, 3) == c(1, 2, 3)
sum(c(1, 2, 3) == c(1, 2, 3))
c(1, 2, 3) == c(2, 1, 3)
sum(c(1, 2, 3) == c(2, 1, 3))
```

## IF ELSE

```{r}
a <- 1 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print("A is not 1") # this is what happens if a is not 1
}
```

```{r}
a <- 2 # define a to be a 1
if (a == 1) {
  print(a) # this is what happens if a==1
} else {
  print(rbinom(10,1,.5)) # this is what happens if a is not 1
  1+1
  print("hello world")
  rbinom(10,1,.5)
}
```

```{r}
a <- 3.5
if(a >= 4){
  print("get to go on the cyclone")
}
if(a < 4){
  print("sorry")
}
```

```{r}
# Make a loop do something 5 times
# i is the iterator
# 1:5 creates a vector with 5 numbers in it, 1, 2, 3, 4, 5
# the loop will run 5 times, because there are five things to assign to i
for(i in 1:5) {
  print("hello")
}
```

```{r}
# show the value of i each step of the loop
for(i in 1:5) {
  print(i)
}
```

```{r}
# define the vector to loop over in advance
x <- 1:5
for (i in x) {
  print(i)
}
for(i in 1:5){
  print(i)
}
x <- 1:5
for (matt in x) {
  print(i)
}
x <- 1:5
for (matt in x) {
  print(matt)
}
```

```{r}
# Reminder that i becomes the next value in the vector
# your vector can have any order 
my_sequence <- c(1, 5, 2, 3, 4)
for (i in my_sequence) {
  print(i)
}
```

```{r}
# index vector does not need to be numbers
my_things <- c("A", "B", "C", "D")
for (i in my_things) {
  print(i)
}
```

### Breaking a loop

`break` stops a loop. Used with logical statements to define the conditions necessary to cause the break.

```{r}
for(i in 1:10) {
  if (i < 5) {
    print(i)
  } else{
    break
  }
}
```

### While loops

```{r}
i <- 1 # create an variable
while (i < 6) {
  print(i)
  i <- i + 1 #add one eachs step of the loop
}
```

### Repeat loops

Similar to while, but let's do things until a condition is met.

```{r}
i <- 0
repeat {
  i <- i + 1
  print(i)
  if (i == 5) {
    break
  }
}
```

```{r}
i <- 0
repeat {
    i <- i + 1
    
    if (i == 5) {
      break
    }
    
    print(i)
}
```

#functions

```{r}

my_sum <- function(a, b) {
  return(a + b)
}

my_sum(2, 3)



```

```{r}
function_name <- function(input1, input2) {
  #code here
  return(something)
}
```

```{r}
# define the function
print_hello_world <- function() {
  return(print("hello world"))
}
print_hello_world
print_hello_world()
```

```{r}
return_input <- function(input) {
  return(input)
}
return_input(input = 5)
return_input(5)
```

```{r}
add_one <- function(my_number) {
  temp <- my_number + 1
  return(temp)
}
add_one(10)
```

```{r}
1 + 5 / 2
(1 + 5) / 2
1 + 4 / 4 + 6
(1+4) / (4+6)
```

Put numbers into variables, do simple math on the variables

```{r}
 a<-1
 b<-3
 g<-5
 
 (a+b) / g
```
