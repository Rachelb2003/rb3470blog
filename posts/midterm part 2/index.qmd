---
title: "midterm part 2"
author: "rachel babadzhanov"
---

# easier problems:

problem 1: Do simple math with numbers, addition, subtraction, multiplication, division

```{r}
3 + 4
7 - 4
2 * 5
10 / 2

```

problem 2: Put numbers into variables, do simple math on the variables

```{r}

a <- 1
b <- 456
c <- 23423

a+b+c
a+b
a*c

```

problem 3: Write code that will place the numbers 1 to 100 separately into a variable using for loop. Then, again using the seq function.

```{r}

a <- 1:100

a <- seq(from = 1, to = 100, by = 1)

a <- seq(1,100,1)

a <- seq(to=100, from=1, by=1)

# start with null
# grow the vector
b <- c()

for (i in 1:100) {
  b <- c(b,i)
}

# start with empty vector of 100 0s

d <- rep (0,100)

d[1] <- 1
d[2] <- 2
d[3] <- 3

for (i in 1:100){
  d[i] <- i
}

e <- rep(0,100)

for (i in 1:1000){
  if (i <= 100) e[i] <- i
}

```

4. Find the sum of all the integer numbers from 1 to 100.

```{r}

1:100

sum(1:100)

a <- 1:100

my_sum <- 0

for (i in a) {
  my_sum <- my_sum +i
  print(my_sum)
}


```

```{r}

my_sum <- function(my_numbers){
  the_sum <- 0
  for(i in my_numbers){
    the_sum <- the_sum+i
  }
  return(the_sum)
}

my_sum(1:100)

my_sum(1:10)

my_sum(1:1000)

```

5. Write a function to find the sum of all integers between any two values.

```{r}

my_sum_range <- function(min, max){
  
  my_numbers <- min:max
  the_sum    <- 0
  for(i in my_numbers){
    the_sum <- the_sum+i
  }
  return(the_sum)
}

my_sum_range(min = 1, max= 3)
my_sum_range(min =1, max= 100)

#

my_sum_rangeB <- function(min, max){
  
  my_numbers <- seq(from= min,to = max, by = 1)
  the_sum    <- 0
  for(i in my_numbers){
    the_sum <- the_sum+i
  }
  return(the_sum)
}

my_sum_rangeB(min = 1, max= 3)
my_sum_rangeB(min =1, max= 100)

####

my_sum_rangeC <- function(min, max){
  
  my_numbers <- seq(from= min,to = max, by = 1)
  the_sum    <- 0
  for(i in my_numbers){
    the_sum <- the_sum+i
  }
  return(list(sum = the_sum,
              vector = my_numbers))
}

my_sum_rangeC(min = 1, max= 3)
my_sum_rangeC(min =1, max= 100)

```

6. List all of the odd numbers from 1 to 100.

```{r}


1:100

seq(1,100,2)

a <- 1:100

for (i in a){
  if(i%%2 == 1){
    print(i)
  }
}

##

a <- 1:100

for (i in a){
  if(i%%2 == 1) print(i)
}

## logical indexing

a <- 1:100

a[a%%2 == 1]



```

7. List all of the odd numbers from 1 to 100.

```{r}

a <- 1:100

is_odd <- function(x){
  if(x%%2 == 1) {
    TRUE
  }else{
    FALSE
  }
}

for(i in a){
  if( is_odd(i) == TRUE ) print(i)
}

```

```{r}

a <- 1:1000

isprime <- function(x){
  generate_sequence <- 1:x
  counter <- 0
  for(i in generate_sequence){
    if(x%%i == 0){
      counter <- counter+1
    }
  }
  
  if(counter <= 2) {
    return(TRUE)
  } else{
    return(FALSE)
  }
}

for(i in a){
  if(isprime(i) == TRUE) print(i)
}

#######

is_prime_B <- function(x){
  generate_sequence <- 1:x
  counter <- 0
  for(i in generate_sequence){
    if(x%%i == 0){
      counter <- counter+1
    }
  }
  
  if(counter <= 2) {
    prime <- TRUE
  } else{
    prime <- FALSE
  }
  
  return(c(x,counter,prime))
}

prime_table <- data.frame()

for(i in a){
  prime_table <- rbind( prime_table, is_prime_B(i))
}

names(prime_table) <- c("number","count","prime")

library(dplyr)

prime_table %>%
  filter(prime == 1) %>%
  select(number)
```

#harder problems 

1. List the numbers from 1 to 100 with the following constraints. If the number can be divided by three evenly, then print Fizz instead of the number. If the number can be divided by five evenly, then print Buzz instead of the number. Finally, if the number can be divided by three and five evenly, then print FizzBuzz instead of the number. The answer could look something like this:
```{r}
for (i in 1:100) {
  if (i %% 3 == 0 & i %% 5 == 0) {
    print("FizzBuzz")
  } else if (i %% 3 == 0) {
    print("Fizz")
  } else if (i %% 5 == 0) {
    print("Buzz")
  } else {
    print(i)
  }
}

```
2. Generate a matrix for a multiplication table. For example, the labels for the columns could be the numbers 1 to 10, and the labels for the rows could be the numbers 1 to 10. The contents of each of the cells in the matrix should be correct answer for multiplying the column value by the row value.

```{r}

numbers <- 1:10

multiplication_table <- matrix(0, nrow = 10, ncol = 10)

colnames(multiplication_table) <- numbers
rownames(multiplication_table) <- numbers

# Loop through each row and column index and assign the product to the corresponding cell in the matrix
for (i in numbers) {
  for (j in numbers) {
    multiplication_table[i, j] <- i * j
  }
}

# Print the multiplication table
multiplication_table

```